{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ESRLmodel","a","tf","summary","loadmodel","Block","props","handleClick","bind","state","stones","visibleSelect","unselectedStyle","selected","Boolean","backgroundColor","selectedStyle","firstStyle","secondStyle","number","Number","clickAction","onClick","this","prevProps","setState","className","style","Component","InitDisplay","mark","Button","variant","size","ESRL","App","Math","random","choices","i","j","push","t","cases","case_param","Array","fill","w","decided","decidedPos","l","virpos","stonePos","m","length","predicted_value","predict","dataSync","choiceIndex","weight","base","top","summen","reduce","accumulator","currentValue","pow","dice","under","weightRandom","choice","console","log","max","apply","turnType","selectable","turnCheck","checkBlock","indexOf","floor","blocks","sai","choice1","splice","cci","randomCpu","makeLines","addTurn","addSelected","checkEntanglement","choiceAction","decideBlock","decideBlock1","decideBlock2","checkWinLose","resetField","start","init","display","fieldDisplay","turn","buttonBisible","choiceBisible","showWinLose","text","userMark","turnUser","haveStones","stonePosForWinLose","undefined","tableContents","key","slice","map","value","cpusChoice","alert","sort","b","undefinedCounter","logger","round","WinLose","first","turnSelected","blockSelected","turnNum0","turnNum","color","selectedTurn","k","TF1","score1","TF2","score2","y","count1","count2","countscore","x","z","ButtonGroup","data-turn","event","currentTarget","dataset","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94d6172e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\n\r\nlet ESRLmodel;\r\nasync function loadmodel() {\r\n    ESRLmodel = await tf.loadLayersModel(\"https://eggplanck.github.io/QTTT/DDQN4/model.json\")\r\n    await ESRLmodel.summary()\r\n}\r\nloadmodel();\r\n\r\nclass Block extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.state = {\r\n            stones: props.stones,\r\n            visibleSelect: this.unselectedStyle,\r\n            selected: Boolean(props.selected)\r\n        };\r\n        this.unselectedStyle = {\r\n            backgroundColor: 'white'\r\n        }\r\n        this.selectedStyle = {\r\n            backgroundColor: 'gray'\r\n        }\r\n        this.firstStyle = {\r\n            backgroundColor: 'rgba(255, 0, 0, 0.6)'\r\n        }\r\n        this.secondStyle = {\r\n            backgroundColor: 'rgba(0, 0, 255, 0.6)'\r\n        }\r\n        this.number = Number(props.number)\r\n        this.clickAction = props.onClick\r\n    }\r\n    handleClick() {\r\n        this.clickAction(this.number)\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.stones !== this.props.stones){\r\n            if(typeof(this.props.stones) === 'string'){\r\n                if(this.props.stones[0] === '〇'){\r\n                    this.setState({\r\n                        visibleSelect: this.firstStyle\r\n                    })\r\n                }else if (this.props.stones[0] === '✖') {\r\n                    this.setState({\r\n                        visibleSelect: this.secondStyle\r\n                    })\r\n                }\r\n            }else{\r\n                this.setState({visibleSelect: this.unselectedStyle})\r\n            }\r\n            this.setState({\r\n                stones: this.props.stones,\r\n            })\r\n        }\r\n        if(prevProps.selected !== this.props.selected){\r\n            this.setState({\r\n                selected: Boolean(this.props.selected)\r\n            })\r\n            if (Boolean(this.props.selected)) {\r\n                this.setState({visibleSelect: this.selectedStyle})\r\n            } else {\r\n                if(typeof(this.props.stones) !== 'string'){\r\n                    this.setState({visibleSelect: this.unselectedStyle})\r\n                }\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (<td className=\"Block\" style={this.state.visibleSelect} onClick={this.handleClick}>{this.state.stones}</td>)\r\n    }\r\n}\r\n\r\nclass InitDisplay extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.clickAction = props.onClick\r\n        this.state = {\r\n            style : props.style\r\n        }\r\n    }\r\n    handleClick(mark) {\r\n        this.clickAction(mark)\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps !== this.props){\r\n            this.setState({\r\n                style : this.props.style\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='InitDisplay' style={this.state.style}>\r\n                <div className='sengo'>\r\n                    <p className='mess'>Select Mark and Start</p>\r\n                    <Button variant='contained' className='sengobutton' size='large' onClick={()=>this.handleClick(0)}>\r\n                        〇\r\n                    </Button>\r\n                    <Button variant='contained' className='sengobutton' size='large' onClick={()=>this.handleClick(1)}>\r\n                        ✖\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.makeLines = this.makeLines.bind(this)\r\n        this.addTurn = this.addTurn.bind(this)\r\n        this.addSelected = this.addSelected.bind(this)\r\n        this.checkEntanglement = this.checkEntanglement.bind(this)\r\n        this.checkBlock = this.checkBlock.bind(this)\r\n        this.choiceAction = this.choiceAction.bind(this)\r\n        this.decideBlock = this.decideBlock.bind(this)\r\n        this.decideBlock1 = this.decideBlock1.bind(this)\r\n        this.decideBlock2 = this.decideBlock2.bind(this)\r\n        this.checkWinLose = this.checkWinLose.bind(this)\r\n        this.resetField = this.resetField.bind(this)\r\n        this.start = this.start.bind(this)\r\n        this.state = {\r\n            init: {\r\n                display: 'block'\r\n            },\r\n            fieldDisplay : {\r\n                display: 'none'\r\n            },\r\n            turn: 1,\r\n            blocks: [\r\n                {\r\n                    number: 0,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 1,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 2,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 3,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 4,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 5,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 6,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 7,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 8,\r\n                    stones: [],\r\n                    selected: false\r\n                }\r\n            ],\r\n            buttonBisible: {\r\n                display: 'block'\r\n            },\r\n            choiceBisible: {\r\n                display: 'none'\r\n            },\r\n            choices:[],\r\n            showWinLose:{style:{display:'none'},text:''}\r\n        }\r\n        this.userMark = 0\r\n        this.turn = 1\r\n        this.turnUser = 0\r\n        this.turnType = 'normal'\r\n        this.blocks = [\r\n            {\r\n                number: 0,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 1,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 2,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 3,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 4,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 5,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 6,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 7,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 8,\r\n                stones: [],\r\n                selected: false\r\n            }\r\n        ]\r\n        this.selected = []\r\n        this.haveStones = []\r\n        this.stonePos = [\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            []\r\n        ]\r\n        this.decidedPos = [0,0,0,0,0,0,0,0,0]\r\n        this.stonePosForWinLose = [[undefined,undefined,undefined],[undefined,undefined,undefined],[undefined,undefined,undefined]]\r\n    }\r\n    makeLines() {\r\n        let tableContents = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            tableContents.push(<tr key={i}>{this.state.blocks.slice(i * 3, i * 3 + 3).map((value, key) => (<Block number={value.number} stones={value.stones} selected={value.selected}  onClick={this.addSelected} key={value.number}/>))}</tr>)\r\n        }\r\n        return tableContents\r\n    }\r\n    start(mark) {\r\n        if (mark === 0) {\r\n            this.userMark = 0\r\n            this.setState({\r\n                init: {\r\n                    display: 'none'\r\n                },\r\n                fieldDisplay: {\r\n                    display: 'block'\r\n                }\r\n            })\r\n        }\r\n        if (mark === 1) {\r\n            this.userMark = 1\r\n            this.setState({\r\n                init: {\r\n                    display: 'none'\r\n                },\r\n                fieldDisplay: {\r\n                    display: 'block'\r\n                }\r\n            })\r\n            this.cpusChoice()\r\n        }\r\n    }\r\n    addSelected(number) {\r\n        if(this.turnType !== 'normal'){\r\n            return\r\n        }\r\n        if(typeof(this.blocks[Number(number)].stones) === 'string'){\r\n            return\r\n        }\r\n        if (this.blocks[Number(number)].selected) {\r\n            this.blocks[Number(number)].selected = false\r\n            for (let i = 0; i < this.selected.length; i++) {\r\n                if (this.selected[i] === number) {\r\n                    this.selected.splice(i, 1)\r\n                }\r\n            }\r\n            this.setState({blocks: this.blocks})\r\n        } else {\r\n            if (this.selected.length < 2) {\r\n                this.blocks[Number(number)].selected = true\r\n                this.selected.push(Number(number))\r\n                this.setState({blocks: this.blocks})\r\n            }\r\n        }\r\n    }\r\n    addTurn() {\r\n        if (this.selected.length === 2) {\r\n            for (let number of this.selected) {\r\n                if (this.turnUser === 0) {\r\n                    this.blocks[number].stones.push('〇' + this.turn + ' ')\r\n                } else {\r\n                    this.blocks[number].stones.push('✖' + this.turn + ' ')\r\n                }\r\n                this.blocks[number].selected = false\r\n                this.setState({blocks: this.blocks})\r\n            }\r\n            this.haveStones.push(this.selected)\r\n            this.stonePos[this.selected[0]].push(this.turn)\r\n            this.stonePos[this.selected[1]].push(this.turn)\r\n\r\n            if (this.checkEntanglement(this.selected[1], this.selected[1], this.turn)) {\r\n                alert('cyclic entanglement')\r\n                this.turnType = 'entanglement'\r\n                this.selected.sort(function(a,b){\r\n                    if(a < b) return -1;\r\n                    if(a > b) return 1;\r\n                    return 0;\r\n                })\r\n                this.cpusChoice()\r\n                return\r\n            }\r\n\r\n            this.turn += 1\r\n            if (this.turn % 2 === 0) {\r\n                this.turnUser = 1\r\n            } else {\r\n                this.turnUser = 0\r\n            }\r\n            this.setState({turn: this.turn})\r\n            this.selected = []\r\n            if(this.turn === 9){\r\n                let undefinedCounter = 0\r\n                let logger = -1\r\n                for(let w=0;w<9;w++){\r\n                    if(typeof(this.blocks[w].stones) !== 'string'){\r\n                        undefinedCounter += 1\r\n                        logger = w\r\n                    }\r\n                }\r\n                if(undefinedCounter === 1){\r\n                    this.blocks[logger].stones = '〇9'\r\n                    this.stonePosForWinLose[Math.floor(logger/3)][Math.round(logger%3)] = 9\r\n                    this.decidedPos[logger] = 9\r\n                    this.setState({\r\n                        blocks:this.blocks\r\n                    })\r\n                    let WinLose = this.checkWinLose()\r\n                    if(WinLose === -1 && this.turn !== 10){\r\n                        return\r\n                    }\r\n                    if(WinLose === -1){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block'},text:'DRAW'}\r\n                        })\r\n                    }\r\n                    if(WinLose === this.userMark){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block'},text:'YOU WIN'}\r\n                        })\r\n                    }\r\n                    if(WinLose === this.userMark){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block'},text:'YOU LOSE'}\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            this.cpusChoice()\r\n        }\r\n    }\r\n    checkEntanglement(first, selected, turn) {\r\n        if (this.stonePos[selected].length === 1) {\r\n            return false\r\n        }\r\n        for (let i = 0; i < (this.stonePos[selected].length); i++) {\r\n            let turnSelected = this.stonePos[selected][i]\r\n            if (turnSelected !== turn) {\r\n                if (this.checkBlock(first, selected, turnSelected)) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    checkBlock(first, selected, turn) {\r\n        for (let i = 0; i < (this.haveStones[turn - 1].length); i++) {\r\n            let blockSelected = this.haveStones[turn - 1][i]\r\n            if (blockSelected !== selected) {\r\n                if (first === blockSelected) {\r\n                    return true\r\n                } else if (this.checkEntanglement(first, blockSelected, turn)) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    choiceAction() {\r\n        this.blocks[this.selected[1]].selected = true\r\n        let choices = []\r\n        for(let turnCheck of this.stonePos[this.selected[1]]){\r\n            if(this.checkBlock(this.selected[1],this.selected[1],turnCheck)){\r\n                choices.push(turnCheck)\r\n            }\r\n        }\r\n        this.setState({\r\n            blocks:this.blocks,\r\n            choices:choices\r\n        })\r\n        this.setState({\r\n            buttonBisible: {\r\n                display: 'none'\r\n            },\r\n            choiceBisible: {\r\n                display: 'inline-block'\r\n            }\r\n        })\r\n    }\r\n    decideBlock(turnNum0){\r\n        const turnNum = Number(turnNum0)\r\n        this.blocks[this.selected[1]].selected = false\r\n        this.setState({\r\n            blocks:this.blocks\r\n        })\r\n        this.stonePosForWinLose[Math.floor(this.selected[1]/3)][Math.round(this.selected[1]%3)] = turnNum\r\n        this.decidedPos[this.selected[1]] = turnNum\r\n        if(turnNum%2 === 1){\r\n            this.blocks[this.selected[1]].stones = '〇' + turnNum\r\n        }else if (turnNum%2 === 0) {\r\n            this.blocks[this.selected[1]].stones = '✖' + turnNum\r\n        }\r\n        this.decideBlock1(this.selected[1],this.selected[1],turnNum,turnNum)\r\n        this.setState({\r\n            blocks:this.blocks\r\n        })\r\n        this.turnType = 'normal'\r\n        this.setState({\r\n            buttonBisible: {\r\n                display: 'block'\r\n            },\r\n            choiceBisible: {\r\n                display: 'none'\r\n            }\r\n        })\r\n        this.turn += 1\r\n        if (this.turn % 2 === 0) {\r\n            this.turnUser = 1\r\n        } else {\r\n            this.turnUser = 0\r\n        }\r\n        this.setState({turn: this.turn})\r\n        this.selected = []\r\n        let WinLose = this.checkWinLose()\r\n        if(WinLose === -1 && this.turn !== 10){\r\n            if(this.turn === 9){\r\n                let undefinedCounter = 0\r\n                let logger = -1\r\n                for(let w=0;w<9;w++){\r\n                    if(typeof(this.blocks[w].stones) !== 'string'){\r\n                        undefinedCounter += 1\r\n                        logger = w\r\n                    }\r\n                }\r\n                if(undefinedCounter === 1){\r\n                    this.blocks[logger].stones = '〇9'\r\n                    this.stonePosForWinLose[Math.floor(logger/3)][Math.round(logger%3)] = 9\r\n                    this.decidedPos[logger] = 9\r\n                    this.setState({\r\n                        blocks:this.blocks\r\n                    })\r\n                    let WinLose = this.checkWinLose()\r\n                    if(WinLose === -1){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block',color:'black'},text:'DRAW'}\r\n                        })\r\n                    }\r\n                    if(WinLose === this.userMark){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block',color:'red'},text:'YOU WIN'}\r\n                        })\r\n                    }\r\n                    if(WinLose === this.userMark){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block',color:'blue'},text:'YOU LOSE'}\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            if(this.turnUser !== this.userMark){\r\n                this.cpusChoice()\r\n                return\r\n            }else {\r\n                return\r\n            }\r\n        }\r\n        if(WinLose === -1){\r\n            this.setState({\r\n                showWinLose:{style:{display:'inline-block',color:'black'},text:'DRAW'}\r\n            })\r\n            return\r\n        }\r\n        if(WinLose === this.userMark){\r\n            this.setState({\r\n                showWinLose:{style:{display:'inline-block',color:'red'},text:'YOU WIN'}\r\n            })\r\n            return\r\n        }\r\n        if(WinLose !== this.userMark){\r\n            this.setState({\r\n                showWinLose:{style:{display:'inline-block',color:'blue'},text:'YOU LOSE'}\r\n            })\r\n            return\r\n        }\r\n    }\r\n    decideBlock1(first,selected,turn,selectedTurn){\r\n        for (let i = 0; i < (this.stonePos[selected].length); i++) {\r\n            let turnSelected = this.stonePos[selected][i]\r\n            if (turnSelected !== turn) {\r\n                this.decideBlock2(first,selected,turnSelected,selectedTurn)\r\n            }\r\n            if(first === selected){\r\n                if(turnSelected === selectedTurn){\r\n                    for (let j = 0; j < (this.haveStones[selectedTurn - 1].length); j++) {\r\n                        let blockSelected = this.haveStones[selectedTurn - 1][j]\r\n                        if (blockSelected !== selected) {\r\n                            for(let k=0;k<this.blocks[blockSelected].stones.length;k++){\r\n                                let iterTurn = this.blocks[blockSelected].stones[k]\r\n                                let selectedTurnStr = selectedTurn%2 === 1 ? '〇'+selectedTurn : '✖'+selectedTurn\r\n                                if(iterTurn === selectedTurnStr){\r\n                                    this.blocks[blockSelected].stones.splice(k,1)\r\n\r\n                                }\r\n                            }\r\n                            for(let t=0;t<this.stonePos[blockSelected].length;t++){\r\n                                let iterTurn2 = this.stonePos[blockSelected][t]\r\n                                if(iterTurn2 === selectedTurn){\r\n                                    this.stonePos[blockSelected].splice(t,1)\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return\r\n    }\r\n    decideBlock2(first,selected,turn,selectedTurn){\r\n        for (let i = 0; i < (this.haveStones[turn - 1].length); i++) {\r\n            let blockSelected = this.haveStones[turn - 1][i]\r\n            if (blockSelected !== selected) {\r\n                if (first === blockSelected) {\r\n                    return\r\n                } else {\r\n                    this.decideBlock1(first,blockSelected,turn,selectedTurn)\r\n                    if(turn%2 === 1){\r\n                        this.blocks[blockSelected].stones = '〇' + turn\r\n                    }else if (turn%2 === 0) {\r\n                        this.blocks[blockSelected].stones = '✖' + turn\r\n                    }\r\n                    this.stonePosForWinLose[Math.floor(blockSelected/3)][Math.round(blockSelected%3)] = turn\r\n                    this.decidedPos[blockSelected] = turn\r\n                }\r\n            }\r\n        }\r\n        return\r\n    }\r\n    checkWinLose(){\r\n        let TF1 = false\r\n        let score1 = 10\r\n        let TF2 = false\r\n        let score2 = 10\r\n        for(let y=0;y<3;y++){\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let countscore = 0\r\n            for(let x=0;x<3;x++){\r\n                if(this.stonePosForWinLose[y][x]%2 === 1){\r\n                    count1 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x]%2 === 0){\r\n                    count2 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x] > countscore){\r\n                    countscore = this.stonePosForWinLose[y][x]\r\n                }\r\n            }\r\n            if(count1 === 3){\r\n                TF1 = true\r\n                if(countscore < score1){\r\n                    score1 = countscore\r\n                }\r\n            }\r\n            if(count2 === 3){\r\n                TF2 = true\r\n                if(countscore < score2){\r\n                    score2 = countscore\r\n                }\r\n            }\r\n        }\r\n        for(let x=0;x<3;x++){\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let countscore = 0\r\n            for(let y=0;y<3;y++){\r\n                if(this.stonePosForWinLose[y][x]%2 === 1){\r\n                    count1 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x]%2 === 0){\r\n                    count2 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x] > countscore){\r\n                    countscore = this.stonePosForWinLose[y][x]\r\n                }\r\n            }\r\n            if(count1 === 3){\r\n                TF1 = true\r\n                if(countscore < score1){\r\n                    score1 = countscore\r\n                }\r\n            }\r\n            if(count2 === 3){\r\n                TF2 = true\r\n                if(countscore < score2){\r\n                    score2 = countscore\r\n                }\r\n            }\r\n        }\r\n        let count1 = 0\r\n        let count2 = 0\r\n        let countscore = 0\r\n        for(let z=0;z<3;z++){\r\n            if(this.stonePosForWinLose[z][z]%2 === 1){\r\n                count1 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][z]%2 === 0){\r\n                count2 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][z] > countscore){\r\n                countscore = this.stonePosForWinLose[z][z]\r\n            }\r\n        }\r\n        if(count1 === 3){\r\n            TF1 = true\r\n            if(countscore < score1){\r\n                score1 = countscore\r\n            }\r\n        }\r\n        if(count2 === 3){\r\n            TF2 = true\r\n            if(countscore < score2){\r\n                score2 = countscore\r\n            }\r\n        }\r\n        count1 = 0\r\n        count2 = 0\r\n        countscore = 0\r\n        for(let z=0;z<3;z++){\r\n            if(this.stonePosForWinLose[z][2-z]%2 === 1){\r\n                count1 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][2-z]%2 === 0){\r\n                count2 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][2-z] > countscore){\r\n                countscore = this.stonePosForWinLose[z][2-z]\r\n            }\r\n        }\r\n        if(count1 === 3){\r\n            TF1 = true\r\n            if(countscore < score1){\r\n                score1 = countscore\r\n            }\r\n        }\r\n        if(count2 === 3){\r\n            TF2 = true\r\n            if(countscore < score2){\r\n                score2 = countscore\r\n            }\r\n        }\r\n\r\n        if(TF1 === true && TF2 === false){\r\n            return 0\r\n        }\r\n        if(TF1 === false && TF2 === true){\r\n            return 1\r\n        }\r\n        if(TF1 === true && TF2 === true){\r\n            if(score1 < score2){\r\n                return 0\r\n            }else if (score1 > score2) {\r\n                return 1\r\n            }\r\n        }\r\n        return -1\r\n    }\r\n    resetField(){\r\n        this.turn = 1\r\n        this.turnUser = 0\r\n        this.turnType = 'normal'\r\n        this.blocks = [\r\n            {\r\n                number: 0,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 1,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 2,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 3,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 4,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 5,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 6,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 7,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 8,\r\n                stones: [],\r\n                selected: false\r\n            }\r\n        ]\r\n        this.selected = []\r\n        this.haveStones = []\r\n        this.stonePos = [\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            []\r\n        ]\r\n        this.decidedPos = [0,0,0,0,0,0,0,0,0]\r\n        this.stonePosForWinLose = [[undefined,undefined,undefined],[undefined,undefined,undefined],[undefined,undefined,undefined]]\r\n        this.setState({\r\n            fieldDisplay: {\r\n                display: 'none'\r\n            },\r\n            init: {\r\n                display: 'block'\r\n            },\r\n            turn: 1,\r\n            blocks: [\r\n                {\r\n                    number: 0,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 1,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 2,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 3,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 4,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 5,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 6,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 7,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 8,\r\n                    stones: [],\r\n                    selected: false\r\n                }\r\n            ],\r\n            buttonBisible: {\r\n                display: 'block'\r\n            },\r\n            choiceBisible: {\r\n                display: 'none'\r\n            },\r\n            choices:[],\r\n            showWinLose:{style:{display:'none'},text:''}\r\n        })\r\n    }\r\n    cpusChoice(){\r\n        if(this.turnType === 'entanglement') {\r\n            let choice = ESRL(this)\r\n            this.decideBlock(choice)\r\n        }else {\r\n            let choice = ESRL(this)\r\n            this.selected = choice\r\n            if (this.selected.length === 2) {\r\n                for (let number of this.selected) {\r\n                    if (this.turnUser === 0) {\r\n                        this.blocks[number].stones.push('〇' + this.turn + ' ')\r\n                    } else {\r\n                        this.blocks[number].stones.push('✖' + this.turn + ' ')\r\n                    }\r\n                    this.setState({blocks: this.blocks})\r\n                }\r\n                this.haveStones.push(this.selected)\r\n                this.stonePos[this.selected[0]].push(this.turn)\r\n                this.stonePos[this.selected[1]].push(this.turn)\r\n\r\n                if (this.checkEntanglement(this.selected[1], this.selected[1], this.turn)) {\r\n                    alert('cyclic entanglement')\r\n                    this.turnType = 'entanglement'\r\n                    this.choiceAction()\r\n                    return\r\n                }\r\n\r\n                this.turn += 1\r\n                if (this.turn % 2 === 0) {\r\n                    this.turnUser = 1\r\n                } else {\r\n                    this.turnUser = 0\r\n                }\r\n                this.setState({turn: this.turn})\r\n                this.selected = []\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='Field'>\r\n            <InitDisplay onClick={this.start} style={this.state.init}/>\r\n            <div style={this.state.fieldDisplay}>\r\n            <div className='showWinLose' style={this.state.showWinLose.style} onClick={this.resetField}>\r\n                {this.state.showWinLose.text}\r\n            </div>\r\n            <table className=\"App\">\r\n                <tbody>\r\n                    {this.makeLines()}\r\n                </tbody>\r\n            </table>\r\n            <div className=\"turndisplay\">turn: {this.turn}</div>\r\n            <Button variant='contained' color='default' size='large' className=\"button\" style={this.state.buttonBisible} onClick={this.addTurn}>Place</Button>\r\n            <ButtonGroup className='choice' style={this.state.choiceBisible}>\r\n                {this.state.choices.map((value,key)=>(<Button variant='contained' size='medium' className='marubatsu' key={key} data-turn={value} onClick={(event)=>this.decideBlock(event.currentTarget.dataset.turn)}>{value%2 === 1 ? '〇'+value : '✖'+value}</Button>))}\r\n            </ButtonGroup>\r\n        </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nfunction randomCpu(App) {\r\n    if(App.turnType === 'entanglement') {\r\n        let selectable = []\r\n        for(let turnCheck of App.stonePos[App.selected[1]]){\r\n            if(App.checkBlock(App.selected[1],App.selected[1],turnCheck)){\r\n                selectable.push(turnCheck)\r\n            }\r\n        }\r\n        let choice = selectable[Math.floor(Math.random()*selectable.length)]\r\n        return choice\r\n    }else {\r\n        let selectable = []\r\n        for(let i=0;i<App.blocks.length;i++){\r\n            if(typeof(App.blocks[i].stones) !== 'string') {\r\n                selectable.push(i)\r\n            }\r\n        }\r\n        let sai = Math.floor(Math.random()*selectable.length)\r\n        let choice1 = selectable[sai]\r\n        selectable.splice(sai,1)\r\n        let choice2 = selectable[Math.floor(Math.random()*selectable.length)]\r\n        return [choice1,choice2]\r\n    }\r\n}\r\nfunction ESRL(App) {\r\n    if(Math.random()*100 < 100){\r\n        let choices = []\r\n        for(let i=0;i<8;i++){\r\n            for(let j=i+1;j<9;j++){\r\n                choices.push([i,j])\r\n            }\r\n        }\r\n        for(let t=0;t<9;t++){\r\n            choices.push(t+1)\r\n        }\r\n        let cases = [0,0,0,0,0,0,0,0,0]\r\n        let case_param = Array(18*9)\r\n        case_param.fill(0)\r\n        for(let w=0;w<9;w++){\r\n            let decided = App.decidedPos[w]\r\n            if(decided !== 0){\r\n                case_param[18*w+(decided-1)] = 1\r\n                cases[w] = 1\r\n            }\r\n        }\r\n        for(let l=0;l<9;l++){\r\n            if(cases[l] === 0) {\r\n                let virpos = App.stonePos[l]\r\n                for(let m=0;m<virpos.length;m++) {\r\n                    let sturn = virpos[m]\r\n                    case_param[18*l+9+sturn-1] = 1\r\n                }\r\n                cases[l] = 1\r\n            }\r\n        }\r\n        case_param = tf.tensor([case_param])\r\n        let predicted_value = ESRLmodel.predict(case_param).dataSync()\r\n        let choiceIndex = weightRandom(predicted_value,400)\r\n        //let choiceIndex = predicted_value.indexOf(Math.max.apply(null, predicted_value))\r\n        let choice = choices[choiceIndex]\r\n        console.log(Math.max.apply(null, predicted_value))\r\n        if(App.turnType === 'entanglement') {\r\n            let selectable = []\r\n            for(let turnCheck of App.stonePos[App.selected[1]]){\r\n                if(App.checkBlock(App.selected[1],App.selected[1],turnCheck)){\r\n                    selectable.push(turnCheck)\r\n                }\r\n            }\r\n            if(selectable.indexOf(choice) === -1 || choiceIndex < 36) {\r\n                choice = selectable[Math.floor(Math.random()*selectable.length)]\r\n            }\r\n        }else {\r\n            let selectable = []\r\n            for(let i=0;i<App.blocks.length;i++){\r\n                if(typeof(App.blocks[i].stones) !== 'string') {\r\n                    selectable.push(i)\r\n                }\r\n            }\r\n            if(choiceIndex >= 36){\r\n                let sai = Math.floor(Math.random()*selectable.length)\r\n                let choice1 = selectable[sai]\r\n                selectable.splice(sai,1)\r\n                let choice2 = selectable[Math.floor(Math.random()*selectable.length)]\r\n                choice = [choice1,choice2]\r\n            }else{\r\n                for(let cci of choice){\r\n                    if(selectable.indexOf(cci) === -1) {\r\n                        let sai = Math.floor(Math.random()*selectable.length)\r\n                        let choice1 = selectable[sai]\r\n                        selectable.splice(sai,1)\r\n                        let choice2 = selectable[Math.floor(Math.random()*selectable.length)]\r\n                        choice = [choice1,choice2]\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return choice\r\n    }else{\r\n        console.log(\"random action\")\r\n        return randomCpu(App)\r\n    }\r\n}\r\nfunction weightRandom (weight, base) {\r\n    const reducer = (accumulator,currentValue) => accumulator + Math.pow(base,currentValue)\r\n    let summen = weight.reduce(reducer,0)\r\n    let dice = Math.random() * summen\r\n    let under = 0\r\n    let top\r\n    for(let i=0;i<45;i++){\r\n        top = under + Math.pow(base,weight[i])\r\n        if(under<=dice && dice<top) {\r\n            return i\r\n        }\r\n        under = top\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}