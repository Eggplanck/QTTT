{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ESRLmodel","a","tf","summary","loadmodel","Block","props","handleClick","bind","state","stones","visibleSelect","unselectedStyle","selected","Boolean","backgroundColor","selectedStyle","firstStyle","secondStyle","number","Number","clickAction","onClick","this","prevProps","setState","className","style","Component","randomCpu","App","turnType","selectable","stonePos","turnCheck","checkBlock","push","Math","floor","random","length","i","blocks","sai","choice1","splice","makeLines","addTurn","addSelected","checkEntanglement","choiceAction","decideBlock","decideBlock1","decideBlock2","checkWinLose","resetField","turn","buttonBisible","display","choiceBisible","choices","showWinLose","text","turnUser","haveStones","decidedPos","stonePosForWinLose","undefined","tableContents","key","slice","map","value","alert","sort","b","cpusChoice","undefinedCounter","logger","w","round","WinLose","first","turnSelected","blockSelected","turnNum0","turnNum","color","selectedTurn","j","k","t","TF1","score1","TF2","score2","y","count1","count2","countscore","x","z","choice","Button","variant","size","ButtonGroup","data-turn","event","currentTarget","dataset","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f919d599.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\n\r\nlet ESRLmodel;\r\nasync function loadmodel() {\r\n    ESRLmodel = await tf.loadLayersModel(\"https://eggplanck.github.io/DQNgame/DQNmodel1/model.json\")\r\n    await ESRLmodel.summary()\r\n}\r\nloadmodel();\r\n\r\nclass Block extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.state = {\r\n            stones: props.stones,\r\n            visibleSelect: this.unselectedStyle,\r\n            selected: Boolean(props.selected)\r\n        };\r\n        this.unselectedStyle = {\r\n            backgroundColor: 'white'\r\n        }\r\n        this.selectedStyle = {\r\n            backgroundColor: 'gray'\r\n        }\r\n        this.firstStyle = {\r\n            backgroundColor: 'rgba(255, 0, 0, 0.6)'\r\n        }\r\n        this.secondStyle = {\r\n            backgroundColor: 'rgba(0, 0, 255, 0.6)'\r\n        }\r\n        this.number = Number(props.number)\r\n        this.clickAction = props.onClick\r\n    }\r\n    handleClick() {\r\n        this.clickAction(this.number)\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.stones !== this.props.stones){\r\n            if(typeof(this.props.stones) === 'string'){\r\n                if(this.props.stones[0] === '〇'){\r\n                    this.setState({\r\n                        visibleSelect: this.firstStyle\r\n                    })\r\n                }else if (this.props.stones[0] === '✖') {\r\n                    this.setState({\r\n                        visibleSelect: this.secondStyle\r\n                    })\r\n                }\r\n            }else{\r\n                this.setState({visibleSelect: this.unselectedStyle})\r\n            }\r\n            this.setState({\r\n                stones: this.props.stones,\r\n            })\r\n        }\r\n        if(prevProps.selected !== this.props.selected){\r\n            this.setState({\r\n                selected: Boolean(this.props.selected)\r\n            })\r\n            if (Boolean(this.props.selected)) {\r\n                this.setState({visibleSelect: this.selectedStyle})\r\n            } else {\r\n                if(typeof(this.props.stones) !== 'string'){\r\n                    this.setState({visibleSelect: this.unselectedStyle})\r\n                }\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (<td className=\"Block\" style={this.state.visibleSelect} onClick={this.handleClick}>{this.state.stones}</td>)\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.makeLines = this.makeLines.bind(this)\r\n        this.addTurn = this.addTurn.bind(this)\r\n        this.addSelected = this.addSelected.bind(this)\r\n        this.checkEntanglement = this.checkEntanglement.bind(this)\r\n        this.checkBlock = this.checkBlock.bind(this)\r\n        this.choiceAction = this.choiceAction.bind(this)\r\n        this.decideBlock = this.decideBlock.bind(this)\r\n        this.decideBlock1 = this.decideBlock1.bind(this)\r\n        this.decideBlock2 = this.decideBlock2.bind(this)\r\n        this.checkWinLose = this.checkWinLose.bind(this)\r\n        this.resetField = this.resetField.bind(this)\r\n        this.state = {\r\n            turn: 1,\r\n            blocks: [\r\n                {\r\n                    number: 0,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 1,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 2,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 3,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 4,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 5,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 6,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 7,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 8,\r\n                    stones: [],\r\n                    selected: false\r\n                }\r\n            ],\r\n            buttonBisible: {\r\n                display: 'block'\r\n            },\r\n            choiceBisible: {\r\n                display: 'none'\r\n            },\r\n            choices:[],\r\n            showWinLose:{style:{display:'none'},text:''}\r\n        }\r\n        this.turn = 1\r\n        this.turnUser = 0\r\n        this.turnType = 'normal'\r\n        this.blocks = [\r\n            {\r\n                number: 0,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 1,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 2,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 3,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 4,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 5,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 6,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 7,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 8,\r\n                stones: [],\r\n                selected: false\r\n            }\r\n        ]\r\n        this.selected = []\r\n        this.haveStones = []\r\n        this.stonePos = [\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            []\r\n        ]\r\n        this.decidedPos = [0,0,0,0,0,0,0,0,0]\r\n        this.stonePosForWinLose = [[undefined,undefined,undefined],[undefined,undefined,undefined],[undefined,undefined,undefined]]\r\n    }\r\n    makeLines() {\r\n        let tableContents = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            tableContents.push(<tr key={i}>{this.state.blocks.slice(i * 3, i * 3 + 3).map((value, key) => (<Block number={value.number} stones={value.stones} selected={value.selected}  onClick={this.addSelected} key={value.number}/>))}</tr>)\r\n        }\r\n        return tableContents\r\n    }\r\n    addSelected(number) {\r\n        if(this.turnType !== 'normal'){\r\n            return\r\n        }\r\n        if(typeof(this.blocks[Number(number)].stones) === 'string'){\r\n            return\r\n        }\r\n        if (this.blocks[Number(number)].selected) {\r\n            this.blocks[Number(number)].selected = false\r\n            for (let i = 0; i < this.selected.length; i++) {\r\n                if (this.selected[i] === number) {\r\n                    this.selected.splice(i, 1)\r\n                }\r\n            }\r\n            this.setState({blocks: this.blocks})\r\n        } else {\r\n            if (this.selected.length < 2) {\r\n                this.blocks[Number(number)].selected = true\r\n                this.selected.push(Number(number))\r\n                this.setState({blocks: this.blocks})\r\n            }\r\n        }\r\n    }\r\n    addTurn() {\r\n        if (this.selected.length === 2) {\r\n            for (let number of this.selected) {\r\n                if (this.turnUser === 0) {\r\n                    this.blocks[number].stones.push('〇' + this.turn + ' ')\r\n                } else {\r\n                    this.blocks[number].stones.push('✖' + this.turn + ' ')\r\n                }\r\n                this.blocks[number].selected = false\r\n                this.setState({blocks: this.blocks})\r\n            }\r\n            this.haveStones.push(this.selected)\r\n            this.stonePos[this.selected[0]].push(this.turn)\r\n            this.stonePos[this.selected[1]].push(this.turn)\r\n\r\n            if (this.checkEntanglement(this.selected[1], this.selected[1], this.turn)) {\r\n                alert('cyclic entanglement')\r\n                this.turnType = 'entanglement'\r\n                this.selected.sort(function(a,b){\r\n                    if(a < b) return -1;\r\n                    if(a > b) return 1;\r\n                    return 0;\r\n                })\r\n                this.cpusChoice()\r\n                return\r\n            }\r\n\r\n            this.turn += 1\r\n            if (this.turn % 2 === 0) {\r\n                this.turnUser = 1\r\n            } else {\r\n                this.turnUser = 0\r\n            }\r\n            this.setState({turn: this.turn})\r\n            this.selected = []\r\n            if(this.turn === 9){\r\n                let undefinedCounter = 0\r\n                let logger = -1\r\n                for(let w=0;w<9;w++){\r\n                    if(typeof(this.blocks[w].stones) !== 'string'){\r\n                        undefinedCounter += 1\r\n                        logger = w\r\n                    }\r\n                }\r\n                if(undefinedCounter === 1){\r\n                    this.blocks[logger].stones = '〇9'\r\n                    this.stonePosForWinLose[Math.floor(logger/3)][Math.round(logger%3)] = 9\r\n                    this.decidedPos[logger] = 9\r\n                    this.setState({\r\n                        blocks:this.blocks\r\n                    })\r\n                    let WinLose = this.checkWinLose()\r\n                    if(WinLose === -1 && this.turn !== 10){\r\n                        return\r\n                    }\r\n                    if(WinLose === -1){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block'},text:'引き分け'}\r\n                        })\r\n                    }\r\n                    if(WinLose === 0){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block'},text:'先手の勝ち'}\r\n                        })\r\n                    }\r\n                    if(WinLose === 1){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block'},text:'後手の勝ち'}\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            this.cpusChoice()\r\n        }\r\n    }\r\n    checkEntanglement(first, selected, turn) {\r\n        if (this.stonePos[selected].length === 1) {\r\n            return false\r\n        }\r\n        for (let i = 0; i < (this.stonePos[selected].length); i++) {\r\n            let turnSelected = this.stonePos[selected][i]\r\n            if (turnSelected !== turn) {\r\n                if (this.checkBlock(first, selected, turnSelected)) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    checkBlock(first, selected, turn) {\r\n        for (let i = 0; i < (this.haveStones[turn - 1].length); i++) {\r\n            let blockSelected = this.haveStones[turn - 1][i]\r\n            if (blockSelected !== selected) {\r\n                if (first === blockSelected) {\r\n                    return true\r\n                } else if (this.checkEntanglement(first, blockSelected, turn)) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    choiceAction() {\r\n        this.blocks[this.selected[1]].selected = true\r\n        let choices = []\r\n        for(let turnCheck of this.stonePos[this.selected[1]]){\r\n            if(this.checkBlock(this.selected[1],this.selected[1],turnCheck)){\r\n                choices.push(turnCheck)\r\n            }\r\n        }\r\n        this.setState({\r\n            blocks:this.blocks,\r\n            choices:choices\r\n        })\r\n        this.setState({\r\n            buttonBisible: {\r\n                display: 'none'\r\n            },\r\n            choiceBisible: {\r\n                display: 'inline-block'\r\n            }\r\n        })\r\n    }\r\n    decideBlock(turnNum0){\r\n        const turnNum = Number(turnNum0)\r\n        this.blocks[this.selected[1]].selected = false\r\n        this.setState({\r\n            blocks:this.blocks\r\n        })\r\n        this.stonePosForWinLose[Math.floor(this.selected[1]/3)][Math.round(this.selected[1]%3)] = turnNum\r\n        this.decidedPos[this.selected[1]] = turnNum\r\n        if(turnNum%2 === 1){\r\n            this.blocks[this.selected[1]].stones = '〇' + turnNum\r\n        }else if (turnNum%2 === 0) {\r\n            this.blocks[this.selected[1]].stones = '✖' + turnNum\r\n        }\r\n        this.decideBlock1(this.selected[1],this.selected[1],turnNum,turnNum)\r\n        this.setState({\r\n            blocks:this.blocks\r\n        })\r\n        this.turnType = 'normal'\r\n        this.setState({\r\n            buttonBisible: {\r\n                display: 'block'\r\n            },\r\n            choiceBisible: {\r\n                display: 'none'\r\n            }\r\n        })\r\n        this.turn += 1\r\n        if (this.turn % 2 === 0) {\r\n            this.turnUser = 1\r\n        } else {\r\n            this.turnUser = 0\r\n        }\r\n        this.setState({turn: this.turn})\r\n        this.selected = []\r\n        let WinLose = this.checkWinLose()\r\n        if(WinLose === -1 && this.turn !== 10){\r\n            if(this.turn === 9){\r\n                let undefinedCounter = 0\r\n                let logger = -1\r\n                for(let w=0;w<9;w++){\r\n                    if(typeof(this.blocks[w].stones) !== 'string'){\r\n                        undefinedCounter += 1\r\n                        logger = w\r\n                    }\r\n                }\r\n                if(undefinedCounter === 1){\r\n                    this.blocks[logger].stones = '〇9'\r\n                    this.stonePosForWinLose[Math.floor(logger/3)][Math.round(logger%3)] = 9\r\n                    this.decidedPos[logger] = 9\r\n                    this.setState({\r\n                        blocks:this.blocks\r\n                    })\r\n                    let WinLose = this.checkWinLose()\r\n                    if(WinLose === -1){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block',color:'black'},text:'DRAW'}\r\n                        })\r\n                    }\r\n                    if(WinLose === 0){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block',color:'red'},text:'YOU WIN'}\r\n                        })\r\n                    }\r\n                    if(WinLose === 1){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block',color:'blue'},text:'YOU LOSE'}\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            if(this.turnUser === 1){\r\n                this.cpusChoice()\r\n                return\r\n            }else {\r\n                return\r\n            }\r\n        }\r\n        if(WinLose === -1){\r\n            this.setState({\r\n                showWinLose:{style:{display:'inline-block',color:'black'},text:'DRAW'}\r\n            })\r\n        }\r\n        if(WinLose === 0){\r\n            this.setState({\r\n                showWinLose:{style:{display:'inline-block',color:'red'},text:'YOU WIN'}\r\n            })\r\n        }\r\n        if(WinLose === 1){\r\n            this.setState({\r\n                showWinLose:{style:{display:'inline-block',color:'blue'},text:'YOU LOSE'}\r\n            })\r\n        }\r\n    }\r\n    decideBlock1(first,selected,turn,selectedTurn){\r\n        for (let i = 0; i < (this.stonePos[selected].length); i++) {\r\n            let turnSelected = this.stonePos[selected][i]\r\n            if (turnSelected !== turn) {\r\n                this.decideBlock2(first,selected,turnSelected,selectedTurn)\r\n            }\r\n            if(first === selected){\r\n                if(turnSelected === selectedTurn){\r\n                    for (let j = 0; j < (this.haveStones[selectedTurn - 1].length); j++) {\r\n                        let blockSelected = this.haveStones[selectedTurn - 1][j]\r\n                        if (blockSelected !== selected) {\r\n                            for(let k=0;k<this.blocks[blockSelected].stones.length;k++){\r\n                                let iterTurn = this.blocks[blockSelected].stones[k]\r\n                                let selectedTurnStr = selectedTurn%2 === 1 ? '〇'+selectedTurn : '✖'+selectedTurn\r\n                                if(iterTurn === selectedTurnStr){\r\n                                    this.blocks[blockSelected].stones.splice(k,1)\r\n\r\n                                }\r\n                            }\r\n                            for(let t=0;t<this.stonePos[blockSelected].length;t++){\r\n                                let iterTurn2 = this.stonePos[blockSelected][t]\r\n                                if(iterTurn2 === selectedTurn){\r\n                                    this.stonePos[blockSelected].splice(t,1)\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return\r\n    }\r\n    decideBlock2(first,selected,turn,selectedTurn){\r\n        for (let i = 0; i < (this.haveStones[turn - 1].length); i++) {\r\n            let blockSelected = this.haveStones[turn - 1][i]\r\n            if (blockSelected !== selected) {\r\n                if (first === blockSelected) {\r\n                    return\r\n                } else {\r\n                    this.decideBlock1(first,blockSelected,turn,selectedTurn)\r\n                    if(turn%2 === 1){\r\n                        this.blocks[blockSelected].stones = '〇' + turn\r\n                    }else if (turn%2 === 0) {\r\n                        this.blocks[blockSelected].stones = '✖' + turn\r\n                    }\r\n                    this.stonePosForWinLose[Math.floor(blockSelected/3)][Math.round(blockSelected%3)] = turn\r\n                    this.decidedPos[blockSelected] = turn\r\n                }\r\n            }\r\n        }\r\n        return\r\n    }\r\n    checkWinLose(){\r\n        let TF1 = false\r\n        let score1 = 10\r\n        let TF2 = false\r\n        let score2 = 10\r\n        for(let y=0;y<3;y++){\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let countscore = 0\r\n            for(let x=0;x<3;x++){\r\n                if(this.stonePosForWinLose[y][x]%2 === 1){\r\n                    count1 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x]%2 === 0){\r\n                    count2 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x] > countscore){\r\n                    countscore = this.stonePosForWinLose[y][x]\r\n                }\r\n            }\r\n            if(count1 === 3){\r\n                TF1 = true\r\n                if(countscore < score1){\r\n                    score1 = countscore\r\n                }\r\n            }\r\n            if(count2 === 3){\r\n                TF2 = true\r\n                if(countscore < score2){\r\n                    score2 = countscore\r\n                }\r\n            }\r\n        }\r\n        for(let x=0;x<3;x++){\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let countscore = 0\r\n            for(let y=0;y<3;y++){\r\n                if(this.stonePosForWinLose[y][x]%2 === 1){\r\n                    count1 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x]%2 === 0){\r\n                    count2 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x] > countscore){\r\n                    countscore = this.stonePosForWinLose[y][x]\r\n                }\r\n            }\r\n            if(count1 === 3){\r\n                TF1 = true\r\n                if(countscore < score1){\r\n                    score1 = countscore\r\n                }\r\n            }\r\n            if(count2 === 3){\r\n                TF2 = true\r\n                if(countscore < score2){\r\n                    score2 = countscore\r\n                }\r\n            }\r\n        }\r\n        let count1 = 0\r\n        let count2 = 0\r\n        let countscore = 0\r\n        for(let z=0;z<3;z++){\r\n            if(this.stonePosForWinLose[z][z]%2 === 1){\r\n                count1 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][z]%2 === 0){\r\n                count2 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][z] > countscore){\r\n                countscore = this.stonePosForWinLose[z][z]\r\n            }\r\n        }\r\n        if(count1 === 3){\r\n            TF1 = true\r\n            if(countscore < score1){\r\n                score1 = countscore\r\n            }\r\n        }\r\n        if(count2 === 3){\r\n            TF2 = true\r\n            if(countscore < score2){\r\n                score2 = countscore\r\n            }\r\n        }\r\n        count1 = 0\r\n        count2 = 0\r\n        countscore = 0\r\n        for(let z=0;z<3;z++){\r\n            if(this.stonePosForWinLose[z][2-z]%2 === 1){\r\n                count1 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][2-z]%2 === 0){\r\n                count2 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][2-z] > countscore){\r\n                countscore = this.stonePosForWinLose[z][2-z]\r\n            }\r\n        }\r\n        if(count1 === 3){\r\n            TF1 = true\r\n            if(countscore < score1){\r\n                score1 = countscore\r\n            }\r\n        }\r\n        if(count2 === 3){\r\n            TF2 = true\r\n            if(countscore < score2){\r\n                score2 = countscore\r\n            }\r\n        }\r\n\r\n        if(TF1 === true && TF2 === false){\r\n            return 0\r\n        }\r\n        if(TF1 === false && TF2 === true){\r\n            return 1\r\n        }\r\n        if(TF1 === true && TF2 === true){\r\n            if(score1 < score2){\r\n                return 0\r\n            }else if (score1 > score2) {\r\n                return 1\r\n            }\r\n        }\r\n        return -1\r\n    }\r\n    resetField(){\r\n        this.turn = 1\r\n        this.turnUser = 0\r\n        this.turnType = 'normal'\r\n        this.blocks = [\r\n            {\r\n                number: 0,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 1,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 2,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 3,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 4,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 5,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 6,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 7,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 8,\r\n                stones: [],\r\n                selected: false\r\n            }\r\n        ]\r\n        this.selected = []\r\n        this.haveStones = []\r\n        this.stonePos = [\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            []\r\n        ]\r\n        this.stonePosForWinLose = [[undefined,undefined,undefined],[undefined,undefined,undefined],[undefined,undefined,undefined]]\r\n        this.setState({\r\n            turn: 1,\r\n            blocks: [\r\n                {\r\n                    number: 0,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 1,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 2,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 3,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 4,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 5,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 6,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 7,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 8,\r\n                    stones: [],\r\n                    selected: false\r\n                }\r\n            ],\r\n            buttonBisible: {\r\n                display: 'block'\r\n            },\r\n            choiceBisible: {\r\n                display: 'none'\r\n            },\r\n            choices:[],\r\n            showWinLose:{style:{display:'none'},text:''}\r\n        })\r\n    }\r\n    cpusChoice(){\r\n        if(this.turnType === 'entanglement') {\r\n            let choice = randomCpu(this)\r\n            this.decideBlock(choice)\r\n        }else {\r\n            let choice = randomCpu(this)\r\n            this.selected = choice\r\n            if (this.selected.length === 2) {\r\n                for (let number of this.selected) {\r\n                    if (this.turnUser === 0) {\r\n                        this.blocks[number].stones.push('〇' + this.turn + ' ')\r\n                    } else {\r\n                        this.blocks[number].stones.push('✖' + this.turn + ' ')\r\n                    }\r\n                    this.setState({blocks: this.blocks})\r\n                }\r\n                this.haveStones.push(this.selected)\r\n                this.stonePos[this.selected[0]].push(this.turn)\r\n                this.stonePos[this.selected[1]].push(this.turn)\r\n\r\n                if (this.checkEntanglement(this.selected[1], this.selected[1], this.turn)) {\r\n                    alert('cyclic entanglement')\r\n                    this.turnType = 'entanglement'\r\n                    this.choiceAction()\r\n                    return\r\n                }\r\n\r\n                this.turn += 1\r\n                if (this.turn % 2 === 0) {\r\n                    this.turnUser = 1\r\n                } else {\r\n                    this.turnUser = 0\r\n                }\r\n                this.setState({turn: this.turn})\r\n                this.selected = []\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='Field'>\r\n            <div className='showWinLose' style={this.state.showWinLose.style} onClick={this.resetField}>\r\n                {this.state.showWinLose.text}\r\n            </div>\r\n            <table className=\"App\">\r\n                <tbody>\r\n                    {this.makeLines()}\r\n                </tbody>\r\n            </table>\r\n            <div className=\"turndisplay\">turn: {this.turn}</div>\r\n            <Button variant='contained' color='default' size='large' className=\"button\" style={this.state.buttonBisible} onClick={this.addTurn}>確定</Button>\r\n            <ButtonGroup className='choice' style={this.state.choiceBisible}>\r\n                {this.state.choices.map((value,key)=>(<Button variant='contained' size='medium' className='marubatsu' key={key} data-turn={value} onClick={(event)=>this.decideBlock(event.currentTarget.dataset.turn)}>{value%2 === 1 ? '〇'+value : '✖'+value}</Button>))}\r\n            </ButtonGroup>\r\n        </div>)\r\n    }\r\n}\r\n\r\nfunction randomCpu(App) {\r\n    if(App.turnType === 'entanglement') {\r\n        let selectable = []\r\n        for(let turnCheck of App.stonePos[App.selected[1]]){\r\n            if(App.checkBlock(App.selected[1],App.selected[1],turnCheck)){\r\n                selectable.push(turnCheck)\r\n            }\r\n        }\r\n        let choice = selectable[Math.floor(Math.random()*selectable.length)]\r\n        return choice\r\n    }else {\r\n        let selectable = []\r\n        for(let i=0;i<App.blocks.length;i++){\r\n            if(typeof(App.blocks[i].stones) !== 'string') {\r\n                selectable.push(i)\r\n            }\r\n        }\r\n        let sai = Math.floor(Math.random()*selectable.length)\r\n        let choice1 = selectable[sai]\r\n        selectable.splice(sai,1)\r\n        let choice2 = selectable[Math.floor(Math.random()*selectable.length)]\r\n        return [choice1,choice2]\r\n    }\r\n}\r\nfunction ESRL(App) {\r\n    if(Math.random()*100 < 90){\r\n        let choices = []\r\n        for(let i=0;i<8;i++){\r\n            for(let j=i+1;j<9;j++){\r\n                choices.push([i,j])\r\n            }\r\n        }\r\n        for(let t=0;t<9;t++){\r\n            choices.push(t+1)\r\n        }\r\n        let cases = [0,0,0,0,0,0,0,0,0]\r\n        let case_param = Array(18*9)\r\n        case_param.fill(0)\r\n        for(let w=0;w<9;w++){\r\n            let decided = App.decidedPos[w]\r\n            if(decided !== 0){\r\n                case_param[18*w+(decided-1)] = 1\r\n                cases[w] = 1\r\n            }\r\n        }\r\n        for(let l=0;l<9;l++){\r\n            if(cases[l] === 0) {\r\n                let virpos = App.stonePos[l]\r\n                for(let m=0;m<virpos.length;m++) {\r\n                    case_param[18*l+9+m] = 1\r\n                }\r\n                cases[l] = 1\r\n            }\r\n        }\r\n        case_param = tf.tensor(case_param)\r\n        let predicted_value = ESRLmodel.predict(case_param).dataSync()\r\n        let choiceIndex = predicted_value.indexOf(Math.max.apply(null, predicted_value))\r\n        let choice = choices[choiceIndex]\r\n        if(App.turnType === 'entanglement') {\r\n            let selectable = []\r\n            for(let turnCheck of App.stonePos[App.selected[1]]){\r\n                if(App.checkBlock(App.selected[1],App.selected[1],turnCheck)){\r\n                    selectable.push(turnCheck)\r\n                }\r\n            }\r\n            if(selectable.indexOf(choice) === -1) {\r\n                choice = selectable[Math.floor(Math.random()*selectable.length)]\r\n            }\r\n        }else {\r\n            let selectable = []\r\n            for(let i=0;i<App.blocks.length;i++){\r\n                if(typeof(App.blocks[i].stones) !== 'string') {\r\n                    selectable.push(i)\r\n                }\r\n            }\r\n            for(let cci of choice){\r\n                if(selectable.indexOf(cci) === -1) {\r\n                    let sai = Math.floor(Math.random()*selectable.length)\r\n                    let choice1 = selectable[sai]\r\n                    selectable.splice(sai,1)\r\n                    let choice2 = selectable[Math.floor(Math.random()*selectable.length)]\r\n                    choice = [choice1,choice2]\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return choice\r\n    }else{\r\n        return randomCpu(App)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}