{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ESRLmodel","a","tf","summary","loadmodel","Block","props","handleClick","bind","state","stones","visibleSelect","unselectedStyle","selected","Boolean","backgroundColor","selectedStyle","firstStyle","secondStyle","number","Number","clickAction","onClick","this","prevProps","setState","className","style","Component","InitDisplay","mark","Button","variant","size","ESRL","App","Math","random","choices","i","j","push","t","cases","case_param","Array","fill","w","decided","decidedPos","l","virpos","stonePos","m","length","predicted_value","predict","dataSync","choiceIndex","indexOf","max","apply","choice","console","log","turnType","selectable","turnCheck","checkBlock","floor","blocks","sai","choice1","splice","cci","randomCpu","makeLines","addTurn","addSelected","checkEntanglement","choiceAction","decideBlock","decideBlock1","decideBlock2","checkWinLose","resetField","start","init","display","fieldDisplay","turn","buttonBisible","choiceBisible","showWinLose","text","userMark","turnUser","haveStones","stonePosForWinLose","undefined","tableContents","key","slice","map","value","cpusChoice","alert","sort","b","undefinedCounter","logger","round","WinLose","first","turnSelected","blockSelected","turnNum0","turnNum","color","selectedTurn","k","TF1","score1","TF2","score2","y","count1","count2","countscore","x","z","ButtonGroup","data-turn","event","currentTarget","dataset","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.277dc8e8.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\n\r\nlet ESRLmodel;\r\nasync function loadmodel() {\r\n    ESRLmodel = await tf.loadLayersModel(\"https://eggplanck.github.io/QTTT/DDQN4/model.json\")\r\n    await ESRLmodel.summary()\r\n}\r\nloadmodel();\r\n\r\nclass Block extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.state = {\r\n            stones: props.stones,\r\n            visibleSelect: this.unselectedStyle,\r\n            selected: Boolean(props.selected)\r\n        };\r\n        this.unselectedStyle = {\r\n            backgroundColor: 'white'\r\n        }\r\n        this.selectedStyle = {\r\n            backgroundColor: 'gray'\r\n        }\r\n        this.firstStyle = {\r\n            backgroundColor: 'rgba(255, 0, 0, 0.6)'\r\n        }\r\n        this.secondStyle = {\r\n            backgroundColor: 'rgba(0, 0, 255, 0.6)'\r\n        }\r\n        this.number = Number(props.number)\r\n        this.clickAction = props.onClick\r\n    }\r\n    handleClick() {\r\n        this.clickAction(this.number)\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.stones !== this.props.stones){\r\n            if(typeof(this.props.stones) === 'string'){\r\n                if(this.props.stones[0] === '〇'){\r\n                    this.setState({\r\n                        visibleSelect: this.firstStyle\r\n                    })\r\n                }else if (this.props.stones[0] === '✖') {\r\n                    this.setState({\r\n                        visibleSelect: this.secondStyle\r\n                    })\r\n                }\r\n            }else{\r\n                this.setState({visibleSelect: this.unselectedStyle})\r\n            }\r\n            this.setState({\r\n                stones: this.props.stones,\r\n            })\r\n        }\r\n        if(prevProps.selected !== this.props.selected){\r\n            this.setState({\r\n                selected: Boolean(this.props.selected)\r\n            })\r\n            if (Boolean(this.props.selected)) {\r\n                this.setState({visibleSelect: this.selectedStyle})\r\n            } else {\r\n                if(typeof(this.props.stones) !== 'string'){\r\n                    this.setState({visibleSelect: this.unselectedStyle})\r\n                }\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (<td className=\"Block\" style={this.state.visibleSelect} onClick={this.handleClick}>{this.state.stones}</td>)\r\n    }\r\n}\r\n\r\nclass InitDisplay extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.clickAction = props.onClick\r\n        this.state = {\r\n            style : props.style\r\n        }\r\n    }\r\n    handleClick(mark) {\r\n        this.clickAction(mark)\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps !== this.props){\r\n            this.setState({\r\n                style : this.props.style\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='InitDisplay' style={this.state.style}>\r\n                <div className='sengo'>\r\n                    <p className='mess'>Select Mark and Start</p>\r\n                    <Button variant='contained' className='sengobutton' size='large' onClick={()=>this.handleClick(0)}>\r\n                        〇\r\n                    </Button>\r\n                    <Button variant='contained' className='sengobutton' size='large' onClick={()=>this.handleClick(1)}>\r\n                        ✖\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.makeLines = this.makeLines.bind(this)\r\n        this.addTurn = this.addTurn.bind(this)\r\n        this.addSelected = this.addSelected.bind(this)\r\n        this.checkEntanglement = this.checkEntanglement.bind(this)\r\n        this.checkBlock = this.checkBlock.bind(this)\r\n        this.choiceAction = this.choiceAction.bind(this)\r\n        this.decideBlock = this.decideBlock.bind(this)\r\n        this.decideBlock1 = this.decideBlock1.bind(this)\r\n        this.decideBlock2 = this.decideBlock2.bind(this)\r\n        this.checkWinLose = this.checkWinLose.bind(this)\r\n        this.resetField = this.resetField.bind(this)\r\n        this.start = this.start.bind(this)\r\n        this.state = {\r\n            init: {\r\n                display: 'block'\r\n            },\r\n            fieldDisplay : {\r\n                display: 'none'\r\n            },\r\n            turn: 1,\r\n            blocks: [\r\n                {\r\n                    number: 0,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 1,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 2,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 3,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 4,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 5,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 6,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 7,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 8,\r\n                    stones: [],\r\n                    selected: false\r\n                }\r\n            ],\r\n            buttonBisible: {\r\n                display: 'block'\r\n            },\r\n            choiceBisible: {\r\n                display: 'none'\r\n            },\r\n            choices:[],\r\n            showWinLose:{style:{display:'none'},text:''}\r\n        }\r\n        this.userMark = 0\r\n        this.turn = 1\r\n        this.turnUser = 0\r\n        this.turnType = 'normal'\r\n        this.blocks = [\r\n            {\r\n                number: 0,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 1,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 2,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 3,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 4,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 5,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 6,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 7,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 8,\r\n                stones: [],\r\n                selected: false\r\n            }\r\n        ]\r\n        this.selected = []\r\n        this.haveStones = []\r\n        this.stonePos = [\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            []\r\n        ]\r\n        this.decidedPos = [0,0,0,0,0,0,0,0,0]\r\n        this.stonePosForWinLose = [[undefined,undefined,undefined],[undefined,undefined,undefined],[undefined,undefined,undefined]]\r\n    }\r\n    makeLines() {\r\n        let tableContents = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            tableContents.push(<tr key={i}>{this.state.blocks.slice(i * 3, i * 3 + 3).map((value, key) => (<Block number={value.number} stones={value.stones} selected={value.selected}  onClick={this.addSelected} key={value.number}/>))}</tr>)\r\n        }\r\n        return tableContents\r\n    }\r\n    start(mark) {\r\n        if (mark === 0) {\r\n            this.userMark = 0\r\n            this.setState({\r\n                init: {\r\n                    display: 'none'\r\n                },\r\n                fieldDisplay: {\r\n                    display: 'block'\r\n                }\r\n            })\r\n        }\r\n        if (mark === 1) {\r\n            this.userMark = 1\r\n            this.setState({\r\n                init: {\r\n                    display: 'none'\r\n                },\r\n                fieldDisplay: {\r\n                    display: 'block'\r\n                }\r\n            })\r\n            this.cpusChoice()\r\n        }\r\n    }\r\n    addSelected(number) {\r\n        if(this.turnType !== 'normal'){\r\n            return\r\n        }\r\n        if(typeof(this.blocks[Number(number)].stones) === 'string'){\r\n            return\r\n        }\r\n        if (this.blocks[Number(number)].selected) {\r\n            this.blocks[Number(number)].selected = false\r\n            for (let i = 0; i < this.selected.length; i++) {\r\n                if (this.selected[i] === number) {\r\n                    this.selected.splice(i, 1)\r\n                }\r\n            }\r\n            this.setState({blocks: this.blocks})\r\n        } else {\r\n            if (this.selected.length < 2) {\r\n                this.blocks[Number(number)].selected = true\r\n                this.selected.push(Number(number))\r\n                this.setState({blocks: this.blocks})\r\n            }\r\n        }\r\n    }\r\n    addTurn() {\r\n        if (this.selected.length === 2) {\r\n            for (let number of this.selected) {\r\n                if (this.turnUser === 0) {\r\n                    this.blocks[number].stones.push('〇' + this.turn + ' ')\r\n                } else {\r\n                    this.blocks[number].stones.push('✖' + this.turn + ' ')\r\n                }\r\n                this.blocks[number].selected = false\r\n                this.setState({blocks: this.blocks})\r\n            }\r\n            this.haveStones.push(this.selected)\r\n            this.stonePos[this.selected[0]].push(this.turn)\r\n            this.stonePos[this.selected[1]].push(this.turn)\r\n\r\n            if (this.checkEntanglement(this.selected[1], this.selected[1], this.turn)) {\r\n                alert('cyclic entanglement')\r\n                this.turnType = 'entanglement'\r\n                this.selected.sort(function(a,b){\r\n                    if(a < b) return -1;\r\n                    if(a > b) return 1;\r\n                    return 0;\r\n                })\r\n                this.cpusChoice()\r\n                return\r\n            }\r\n\r\n            this.turn += 1\r\n            if (this.turn % 2 === 0) {\r\n                this.turnUser = 1\r\n            } else {\r\n                this.turnUser = 0\r\n            }\r\n            this.setState({turn: this.turn})\r\n            this.selected = []\r\n            if(this.turn === 9){\r\n                let undefinedCounter = 0\r\n                let logger = -1\r\n                for(let w=0;w<9;w++){\r\n                    if(typeof(this.blocks[w].stones) !== 'string'){\r\n                        undefinedCounter += 1\r\n                        logger = w\r\n                    }\r\n                }\r\n                if(undefinedCounter === 1){\r\n                    this.blocks[logger].stones = '〇9'\r\n                    this.stonePosForWinLose[Math.floor(logger/3)][Math.round(logger%3)] = 9\r\n                    this.decidedPos[logger] = 9\r\n                    this.setState({\r\n                        blocks:this.blocks\r\n                    })\r\n                    let WinLose = this.checkWinLose()\r\n                    if(WinLose === -1 && this.turn !== 10){\r\n                        return\r\n                    }\r\n                    if(WinLose === -1){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block'},text:'DRAW'}\r\n                        })\r\n                    }\r\n                    if(WinLose === this.userMark){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block'},text:'YOU WIN'}\r\n                        })\r\n                    }\r\n                    if(WinLose === this.userMark){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block'},text:'YOU LOSE'}\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            this.cpusChoice()\r\n        }\r\n    }\r\n    checkEntanglement(first, selected, turn) {\r\n        if (this.stonePos[selected].length === 1) {\r\n            return false\r\n        }\r\n        for (let i = 0; i < (this.stonePos[selected].length); i++) {\r\n            let turnSelected = this.stonePos[selected][i]\r\n            if (turnSelected !== turn) {\r\n                if (this.checkBlock(first, selected, turnSelected)) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    checkBlock(first, selected, turn) {\r\n        for (let i = 0; i < (this.haveStones[turn - 1].length); i++) {\r\n            let blockSelected = this.haveStones[turn - 1][i]\r\n            if (blockSelected !== selected) {\r\n                if (first === blockSelected) {\r\n                    return true\r\n                } else if (this.checkEntanglement(first, blockSelected, turn)) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    choiceAction() {\r\n        this.blocks[this.selected[1]].selected = true\r\n        let choices = []\r\n        for(let turnCheck of this.stonePos[this.selected[1]]){\r\n            if(this.checkBlock(this.selected[1],this.selected[1],turnCheck)){\r\n                choices.push(turnCheck)\r\n            }\r\n        }\r\n        this.setState({\r\n            blocks:this.blocks,\r\n            choices:choices\r\n        })\r\n        this.setState({\r\n            buttonBisible: {\r\n                display: 'none'\r\n            },\r\n            choiceBisible: {\r\n                display: 'inline-block'\r\n            }\r\n        })\r\n    }\r\n    decideBlock(turnNum0){\r\n        const turnNum = Number(turnNum0)\r\n        this.blocks[this.selected[1]].selected = false\r\n        this.setState({\r\n            blocks:this.blocks\r\n        })\r\n        this.stonePosForWinLose[Math.floor(this.selected[1]/3)][Math.round(this.selected[1]%3)] = turnNum\r\n        this.decidedPos[this.selected[1]] = turnNum\r\n        if(turnNum%2 === 1){\r\n            this.blocks[this.selected[1]].stones = '〇' + turnNum\r\n        }else if (turnNum%2 === 0) {\r\n            this.blocks[this.selected[1]].stones = '✖' + turnNum\r\n        }\r\n        this.decideBlock1(this.selected[1],this.selected[1],turnNum,turnNum)\r\n        this.setState({\r\n            blocks:this.blocks\r\n        })\r\n        this.turnType = 'normal'\r\n        this.setState({\r\n            buttonBisible: {\r\n                display: 'block'\r\n            },\r\n            choiceBisible: {\r\n                display: 'none'\r\n            }\r\n        })\r\n        this.turn += 1\r\n        if (this.turn % 2 === 0) {\r\n            this.turnUser = 1\r\n        } else {\r\n            this.turnUser = 0\r\n        }\r\n        this.setState({turn: this.turn})\r\n        this.selected = []\r\n        let WinLose = this.checkWinLose()\r\n        if(WinLose === -1 && this.turn !== 10){\r\n            if(this.turn === 9){\r\n                let undefinedCounter = 0\r\n                let logger = -1\r\n                for(let w=0;w<9;w++){\r\n                    if(typeof(this.blocks[w].stones) !== 'string'){\r\n                        undefinedCounter += 1\r\n                        logger = w\r\n                    }\r\n                }\r\n                if(undefinedCounter === 1){\r\n                    this.blocks[logger].stones = '〇9'\r\n                    this.stonePosForWinLose[Math.floor(logger/3)][Math.round(logger%3)] = 9\r\n                    this.decidedPos[logger] = 9\r\n                    this.setState({\r\n                        blocks:this.blocks\r\n                    })\r\n                    let WinLose = this.checkWinLose()\r\n                    if(WinLose === -1){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block',color:'black'},text:'DRAW'}\r\n                        })\r\n                    }\r\n                    if(WinLose === this.userMark){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block',color:'red'},text:'YOU WIN'}\r\n                        })\r\n                    }\r\n                    if(WinLose === this.userMark){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block',color:'blue'},text:'YOU LOSE'}\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            if(this.turnUser !== this.userMark){\r\n                this.cpusChoice()\r\n                return\r\n            }else {\r\n                return\r\n            }\r\n        }\r\n        if(WinLose === -1){\r\n            this.setState({\r\n                showWinLose:{style:{display:'inline-block',color:'black'},text:'DRAW'}\r\n            })\r\n            return\r\n        }\r\n        if(WinLose === this.userMark){\r\n            this.setState({\r\n                showWinLose:{style:{display:'inline-block',color:'red'},text:'YOU WIN'}\r\n            })\r\n            return\r\n        }\r\n        if(WinLose !== this.userMark){\r\n            this.setState({\r\n                showWinLose:{style:{display:'inline-block',color:'blue'},text:'YOU LOSE'}\r\n            })\r\n            return\r\n        }\r\n    }\r\n    decideBlock1(first,selected,turn,selectedTurn){\r\n        for (let i = 0; i < (this.stonePos[selected].length); i++) {\r\n            let turnSelected = this.stonePos[selected][i]\r\n            if (turnSelected !== turn) {\r\n                this.decideBlock2(first,selected,turnSelected,selectedTurn)\r\n            }\r\n            if(first === selected){\r\n                if(turnSelected === selectedTurn){\r\n                    for (let j = 0; j < (this.haveStones[selectedTurn - 1].length); j++) {\r\n                        let blockSelected = this.haveStones[selectedTurn - 1][j]\r\n                        if (blockSelected !== selected) {\r\n                            for(let k=0;k<this.blocks[blockSelected].stones.length;k++){\r\n                                let iterTurn = this.blocks[blockSelected].stones[k]\r\n                                let selectedTurnStr = selectedTurn%2 === 1 ? '〇'+selectedTurn : '✖'+selectedTurn\r\n                                if(iterTurn === selectedTurnStr){\r\n                                    this.blocks[blockSelected].stones.splice(k,1)\r\n\r\n                                }\r\n                            }\r\n                            for(let t=0;t<this.stonePos[blockSelected].length;t++){\r\n                                let iterTurn2 = this.stonePos[blockSelected][t]\r\n                                if(iterTurn2 === selectedTurn){\r\n                                    this.stonePos[blockSelected].splice(t,1)\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return\r\n    }\r\n    decideBlock2(first,selected,turn,selectedTurn){\r\n        for (let i = 0; i < (this.haveStones[turn - 1].length); i++) {\r\n            let blockSelected = this.haveStones[turn - 1][i]\r\n            if (blockSelected !== selected) {\r\n                if (first === blockSelected) {\r\n                    return\r\n                } else {\r\n                    this.decideBlock1(first,blockSelected,turn,selectedTurn)\r\n                    if(turn%2 === 1){\r\n                        this.blocks[blockSelected].stones = '〇' + turn\r\n                    }else if (turn%2 === 0) {\r\n                        this.blocks[blockSelected].stones = '✖' + turn\r\n                    }\r\n                    this.stonePosForWinLose[Math.floor(blockSelected/3)][Math.round(blockSelected%3)] = turn\r\n                    this.decidedPos[blockSelected] = turn\r\n                }\r\n            }\r\n        }\r\n        return\r\n    }\r\n    checkWinLose(){\r\n        let TF1 = false\r\n        let score1 = 10\r\n        let TF2 = false\r\n        let score2 = 10\r\n        for(let y=0;y<3;y++){\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let countscore = 0\r\n            for(let x=0;x<3;x++){\r\n                if(this.stonePosForWinLose[y][x]%2 === 1){\r\n                    count1 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x]%2 === 0){\r\n                    count2 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x] > countscore){\r\n                    countscore = this.stonePosForWinLose[y][x]\r\n                }\r\n            }\r\n            if(count1 === 3){\r\n                TF1 = true\r\n                if(countscore < score1){\r\n                    score1 = countscore\r\n                }\r\n            }\r\n            if(count2 === 3){\r\n                TF2 = true\r\n                if(countscore < score2){\r\n                    score2 = countscore\r\n                }\r\n            }\r\n        }\r\n        for(let x=0;x<3;x++){\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let countscore = 0\r\n            for(let y=0;y<3;y++){\r\n                if(this.stonePosForWinLose[y][x]%2 === 1){\r\n                    count1 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x]%2 === 0){\r\n                    count2 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x] > countscore){\r\n                    countscore = this.stonePosForWinLose[y][x]\r\n                }\r\n            }\r\n            if(count1 === 3){\r\n                TF1 = true\r\n                if(countscore < score1){\r\n                    score1 = countscore\r\n                }\r\n            }\r\n            if(count2 === 3){\r\n                TF2 = true\r\n                if(countscore < score2){\r\n                    score2 = countscore\r\n                }\r\n            }\r\n        }\r\n        let count1 = 0\r\n        let count2 = 0\r\n        let countscore = 0\r\n        for(let z=0;z<3;z++){\r\n            if(this.stonePosForWinLose[z][z]%2 === 1){\r\n                count1 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][z]%2 === 0){\r\n                count2 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][z] > countscore){\r\n                countscore = this.stonePosForWinLose[z][z]\r\n            }\r\n        }\r\n        if(count1 === 3){\r\n            TF1 = true\r\n            if(countscore < score1){\r\n                score1 = countscore\r\n            }\r\n        }\r\n        if(count2 === 3){\r\n            TF2 = true\r\n            if(countscore < score2){\r\n                score2 = countscore\r\n            }\r\n        }\r\n        count1 = 0\r\n        count2 = 0\r\n        countscore = 0\r\n        for(let z=0;z<3;z++){\r\n            if(this.stonePosForWinLose[z][2-z]%2 === 1){\r\n                count1 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][2-z]%2 === 0){\r\n                count2 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][2-z] > countscore){\r\n                countscore = this.stonePosForWinLose[z][2-z]\r\n            }\r\n        }\r\n        if(count1 === 3){\r\n            TF1 = true\r\n            if(countscore < score1){\r\n                score1 = countscore\r\n            }\r\n        }\r\n        if(count2 === 3){\r\n            TF2 = true\r\n            if(countscore < score2){\r\n                score2 = countscore\r\n            }\r\n        }\r\n\r\n        if(TF1 === true && TF2 === false){\r\n            return 0\r\n        }\r\n        if(TF1 === false && TF2 === true){\r\n            return 1\r\n        }\r\n        if(TF1 === true && TF2 === true){\r\n            if(score1 < score2){\r\n                return 0\r\n            }else if (score1 > score2) {\r\n                return 1\r\n            }\r\n        }\r\n        return -1\r\n    }\r\n    resetField(){\r\n        this.turn = 1\r\n        this.turnUser = 0\r\n        this.turnType = 'normal'\r\n        this.blocks = [\r\n            {\r\n                number: 0,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 1,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 2,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 3,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 4,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 5,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 6,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 7,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 8,\r\n                stones: [],\r\n                selected: false\r\n            }\r\n        ]\r\n        this.selected = []\r\n        this.haveStones = []\r\n        this.stonePos = [\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            []\r\n        ]\r\n        this.decidedPos = [0,0,0,0,0,0,0,0,0]\r\n        this.stonePosForWinLose = [[undefined,undefined,undefined],[undefined,undefined,undefined],[undefined,undefined,undefined]]\r\n        this.setState({\r\n            fieldDisplay: {\r\n                display: 'none'\r\n            },\r\n            init: {\r\n                display: 'block'\r\n            },\r\n            turn: 1,\r\n            blocks: [\r\n                {\r\n                    number: 0,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 1,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 2,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 3,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 4,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 5,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 6,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 7,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 8,\r\n                    stones: [],\r\n                    selected: false\r\n                }\r\n            ],\r\n            buttonBisible: {\r\n                display: 'block'\r\n            },\r\n            choiceBisible: {\r\n                display: 'none'\r\n            },\r\n            choices:[],\r\n            showWinLose:{style:{display:'none'},text:''}\r\n        })\r\n    }\r\n    cpusChoice(){\r\n        if(this.turnType === 'entanglement') {\r\n            let choice = ESRL(this)\r\n            this.decideBlock(choice)\r\n        }else {\r\n            let choice = ESRL(this)\r\n            this.selected = choice\r\n            if (this.selected.length === 2) {\r\n                for (let number of this.selected) {\r\n                    if (this.turnUser === 0) {\r\n                        this.blocks[number].stones.push('〇' + this.turn + ' ')\r\n                    } else {\r\n                        this.blocks[number].stones.push('✖' + this.turn + ' ')\r\n                    }\r\n                    this.setState({blocks: this.blocks})\r\n                }\r\n                this.haveStones.push(this.selected)\r\n                this.stonePos[this.selected[0]].push(this.turn)\r\n                this.stonePos[this.selected[1]].push(this.turn)\r\n\r\n                if (this.checkEntanglement(this.selected[1], this.selected[1], this.turn)) {\r\n                    alert('cyclic entanglement')\r\n                    this.turnType = 'entanglement'\r\n                    this.choiceAction()\r\n                    return\r\n                }\r\n\r\n                this.turn += 1\r\n                if (this.turn % 2 === 0) {\r\n                    this.turnUser = 1\r\n                } else {\r\n                    this.turnUser = 0\r\n                }\r\n                this.setState({turn: this.turn})\r\n                this.selected = []\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (<div className='Field'>\r\n            <InitDisplay onClick={this.start} style={this.state.init}/>\r\n            <div style={this.state.fieldDisplay}>\r\n            <div className='showWinLose' style={this.state.showWinLose.style} onClick={this.resetField}>\r\n                {this.state.showWinLose.text}\r\n            </div>\r\n            <table className=\"App\">\r\n                <tbody>\r\n                    {this.makeLines()}\r\n                </tbody>\r\n            </table>\r\n            <div className=\"turndisplay\">turn: {this.turn}</div>\r\n            <Button variant='contained' color='default' size='large' className=\"button\" style={this.state.buttonBisible} onClick={this.addTurn}>Place</Button>\r\n            <ButtonGroup className='choice' style={this.state.choiceBisible}>\r\n                {this.state.choices.map((value,key)=>(<Button variant='contained' size='medium' className='marubatsu' key={key} data-turn={value} onClick={(event)=>this.decideBlock(event.currentTarget.dataset.turn)}>{value%2 === 1 ? '〇'+value : '✖'+value}</Button>))}\r\n            </ButtonGroup>\r\n        </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nfunction randomCpu(App) {\r\n    if(App.turnType === 'entanglement') {\r\n        let selectable = []\r\n        for(let turnCheck of App.stonePos[App.selected[1]]){\r\n            if(App.checkBlock(App.selected[1],App.selected[1],turnCheck)){\r\n                selectable.push(turnCheck)\r\n            }\r\n        }\r\n        let choice = selectable[Math.floor(Math.random()*selectable.length)]\r\n        return choice\r\n    }else {\r\n        let selectable = []\r\n        for(let i=0;i<App.blocks.length;i++){\r\n            if(typeof(App.blocks[i].stones) !== 'string') {\r\n                selectable.push(i)\r\n            }\r\n        }\r\n        let sai = Math.floor(Math.random()*selectable.length)\r\n        let choice1 = selectable[sai]\r\n        selectable.splice(sai,1)\r\n        let choice2 = selectable[Math.floor(Math.random()*selectable.length)]\r\n        return [choice1,choice2]\r\n    }\r\n}\r\nfunction ESRL(App) {\r\n    if(Math.random()*100 < 90){\r\n        let choices = []\r\n        for(let i=0;i<8;i++){\r\n            for(let j=i+1;j<9;j++){\r\n                choices.push([i,j])\r\n            }\r\n        }\r\n        for(let t=0;t<9;t++){\r\n            choices.push(t+1)\r\n        }\r\n        let cases = [0,0,0,0,0,0,0,0,0]\r\n        let case_param = Array(18*9)\r\n        case_param.fill(0)\r\n        for(let w=0;w<9;w++){\r\n            let decided = App.decidedPos[w]\r\n            if(decided !== 0){\r\n                case_param[18*w+(decided-1)] = 1\r\n                cases[w] = 1\r\n            }\r\n        }\r\n        for(let l=0;l<9;l++){\r\n            if(cases[l] === 0) {\r\n                let virpos = App.stonePos[l]\r\n                for(let m=0;m<virpos.length;m++) {\r\n                    let sturn = virpos[m]\r\n                    case_param[18*l+9+sturn-1] = 1\r\n                }\r\n                cases[l] = 1\r\n            }\r\n        }\r\n        case_param = tf.tensor([case_param])\r\n        let predicted_value = ESRLmodel.predict(case_param).dataSync()\r\n        let choiceIndex = predicted_value.indexOf(Math.max.apply(null, predicted_value))\r\n        let choice = choices[choiceIndex]\r\n        console.log(Math.max.apply(null, predicted_value))\r\n        if(App.turnType === 'entanglement') {\r\n            let selectable = []\r\n            for(let turnCheck of App.stonePos[App.selected[1]]){\r\n                if(App.checkBlock(App.selected[1],App.selected[1],turnCheck)){\r\n                    selectable.push(turnCheck)\r\n                }\r\n            }\r\n            if(selectable.indexOf(choice) === -1 || choiceIndex < 36) {\r\n                choice = selectable[Math.floor(Math.random()*selectable.length)]\r\n            }\r\n        }else {\r\n            let selectable = []\r\n            for(let i=0;i<App.blocks.length;i++){\r\n                if(typeof(App.blocks[i].stones) !== 'string') {\r\n                    selectable.push(i)\r\n                }\r\n            }\r\n            if(choiceIndex >= 36){\r\n                let sai = Math.floor(Math.random()*selectable.length)\r\n                let choice1 = selectable[sai]\r\n                selectable.splice(sai,1)\r\n                let choice2 = selectable[Math.floor(Math.random()*selectable.length)]\r\n                choice = [choice1,choice2]\r\n            }else{\r\n                for(let cci of choice){\r\n                    if(selectable.indexOf(cci) === -1) {\r\n                        let sai = Math.floor(Math.random()*selectable.length)\r\n                        let choice1 = selectable[sai]\r\n                        selectable.splice(sai,1)\r\n                        let choice2 = selectable[Math.floor(Math.random()*selectable.length)]\r\n                        choice = [choice1,choice2]\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return choice\r\n    }else{\r\n        console.log(\"random action\")\r\n        return randomCpu(App)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}