{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ESRLmodel","loadmodel","a","tf","summary","Block","props","handleClick","bind","state","stones","visibleSelect","unselectedStyle","selected","Boolean","backgroundColor","selectedStyle","firstStyle","secondStyle","number","Number","clickAction","onClick","this","prevProps","setState","className","style","Component","InitDisplay","mark","Button","variant","size","href","target","rel","ESRL","App","Math","random","choices","i","j","push","t","cases","case_param","Array","fill","w","decided","decidedPos","l","virpos","stonePos","m","length","choiceIndex","predicted_value","predict","dataSync","choice","turn","weightRandom","indexOf","max","apply","console","log","turnType","selectable","turnCheck","checkBlock","floor","blocks","sai","choice1","splice","cci","randomCpu","weight","top","summen","reduce","accumulator","currentValue","pow","dice","under","makeLines","addTurn","addSelected","checkEntanglement","choiceAction","decideBlock","decideBlock1","decideBlock2","checkWinLose","resetField","clearShowEntangle","start","loading","init","display","fieldDisplay","buttonBisible","choiceBisible","showWinLose","text","showEntangle","userMark","turnUser","haveStones","stonePosForWinLose","undefined","tableContents","key","slice","map","value","cpusChoice","sort","b","undefinedCounter","logger","round","WinLose","first","turnSelected","blockSelected","turnNum0","turnNum","color","selectedTurn","k","TF1","score1","TF2","score2","y","count1","count2","countscore","x","z","textAlign","CircularProgress","ButtonGroup","data-turn","event","currentTarget","dataset","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.aba1c87b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\nlet ESRLmodel;\r\nasync function loadmodel() {\r\n    ESRLmodel = await tf.loadLayersModel(\"https://eggplanck.github.io/QTTT/DDQN4/model.json\")\r\n    await ESRLmodel.summary()\r\n}\r\n\r\nclass Block extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.state = {\r\n            stones: props.stones,\r\n            visibleSelect: this.unselectedStyle,\r\n            selected: Boolean(props.selected)\r\n        };\r\n        this.unselectedStyle = {\r\n            backgroundColor: 'white'\r\n        }\r\n        this.selectedStyle = {\r\n            backgroundColor: 'gray'\r\n        }\r\n        this.firstStyle = {\r\n            backgroundColor: 'rgba(255, 0, 0, 0.6)'\r\n        }\r\n        this.secondStyle = {\r\n            backgroundColor: 'rgba(0, 0, 255, 0.6)'\r\n        }\r\n        this.number = Number(props.number)\r\n        this.clickAction = props.onClick\r\n    }\r\n    handleClick() {\r\n        this.clickAction(this.number)\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.stones !== this.props.stones){\r\n            if(typeof(this.props.stones) === 'string'){\r\n                if(this.props.stones[0] === '〇'){\r\n                    this.setState({\r\n                        visibleSelect: this.firstStyle\r\n                    })\r\n                }else if (this.props.stones[0] === '✖') {\r\n                    this.setState({\r\n                        visibleSelect: this.secondStyle\r\n                    })\r\n                }\r\n            }else{\r\n                this.setState({visibleSelect: this.unselectedStyle})\r\n            }\r\n            this.setState({\r\n                stones: this.props.stones,\r\n            })\r\n        }\r\n        if(prevProps.selected !== this.props.selected){\r\n            this.setState({\r\n                selected: Boolean(this.props.selected)\r\n            })\r\n            if (Boolean(this.props.selected)) {\r\n                this.setState({visibleSelect: this.selectedStyle})\r\n            } else {\r\n                if(typeof(this.props.stones) !== 'string'){\r\n                    this.setState({visibleSelect: this.unselectedStyle})\r\n                }\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (<td className=\"Block\" style={this.state.visibleSelect} onClick={this.handleClick}>{this.state.stones}</td>)\r\n    }\r\n}\r\n\r\nclass InitDisplay extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.clickAction = props.onClick\r\n        this.state = {\r\n            style : props.style\r\n        }\r\n    }\r\n    handleClick(mark) {\r\n        this.clickAction(mark)\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps !== this.props){\r\n            this.setState({\r\n                style : this.props.style\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='InitDisplay' style={this.state.style}>\r\n                <div className='sengo'>\r\n                    <p className='title'>Quantum Tic-Tac-Toe</p>\r\n                    <p className='mess'>Select Mark and Start</p>\r\n                    <Button variant='contained' className='sengobutton' size='large' onClick={()=>this.handleClick(0)}>\r\n                        〇\r\n                    </Button>\r\n                    <Button variant='contained' className='sengobutton' size='large' onClick={()=>this.handleClick(1)}>\r\n                        ✖\r\n                    </Button>\r\n                    <div className='explain'>\r\n                    Quantum Tic-Tac-Toe is a quantum expansion of Tic-Tac-Toe.<br/>\r\n                    You play against AI player made by Deep Q-Network (DQN), which is one of the methods of Deep reinforcement learning.<br/>\r\n                    Can you defeat AI?\r\n                    </div>\r\n                    <div className='tolearn'>To learn the rule: <a href='https://en.wikipedia.org/w/index.php?title=Quantum_tic-tac-toe&oldid=1014709105' target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia \"Quantum tic-tac-toe\" </a></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.makeLines = this.makeLines.bind(this)\r\n        this.addTurn = this.addTurn.bind(this)\r\n        this.addSelected = this.addSelected.bind(this)\r\n        this.checkEntanglement = this.checkEntanglement.bind(this)\r\n        this.checkBlock = this.checkBlock.bind(this)\r\n        this.choiceAction = this.choiceAction.bind(this)\r\n        this.decideBlock = this.decideBlock.bind(this)\r\n        this.decideBlock1 = this.decideBlock1.bind(this)\r\n        this.decideBlock2 = this.decideBlock2.bind(this)\r\n        this.checkWinLose = this.checkWinLose.bind(this)\r\n        this.resetField = this.resetField.bind(this)\r\n        this.clearShowEntangle = this.clearShowEntangle.bind(this)\r\n        this.start = this.start.bind(this)\r\n        this.state = {\r\n            loading:true,\r\n            init: {\r\n                display: 'block'\r\n            },\r\n            fieldDisplay : {\r\n                display: 'none'\r\n            },\r\n            turn: 1,\r\n            blocks: [\r\n                {\r\n                    number: 0,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 1,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 2,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 3,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 4,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 5,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 6,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 7,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 8,\r\n                    stones: [],\r\n                    selected: false\r\n                }\r\n            ],\r\n            buttonBisible: {\r\n                display: 'block'\r\n            },\r\n            choiceBisible: {\r\n                display: 'none'\r\n            },\r\n            choices:[],\r\n            showWinLose:{style:{display:'none'},text:''},\r\n            showEntangle:{style:{display:'none'}}\r\n        }\r\n        this.userMark = 0\r\n        this.turn = 1\r\n        this.turnUser = 0\r\n        this.turnType = 'normal'\r\n        this.blocks = [\r\n            {\r\n                number: 0,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 1,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 2,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 3,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 4,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 5,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 6,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 7,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 8,\r\n                stones: [],\r\n                selected: false\r\n            }\r\n        ]\r\n        this.selected = []\r\n        this.haveStones = []\r\n        this.stonePos = [\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            []\r\n        ]\r\n        this.decidedPos = [0,0,0,0,0,0,0,0,0]\r\n        this.stonePosForWinLose = [[undefined,undefined,undefined],[undefined,undefined,undefined],[undefined,undefined,undefined]]\r\n    }\r\n    componentDidMount(){\r\n        const loading = async () => {\r\n            await loadmodel()\r\n            console.log('loaded')\r\n            this.setState({\r\n                loading:false\r\n            })\r\n        }\r\n        loading()\r\n    }\r\n    makeLines() {\r\n        let tableContents = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            tableContents.push(<tr key={i}>{this.state.blocks.slice(i * 3, i * 3 + 3).map((value, key) => (<Block number={value.number} stones={value.stones} selected={value.selected}  onClick={this.addSelected} key={value.number}/>))}</tr>)\r\n        }\r\n        return tableContents\r\n    }\r\n    start(mark) {\r\n        if (mark === 0) {\r\n            this.userMark = 0\r\n            this.setState({\r\n                init: {\r\n                    display: 'none'\r\n                },\r\n                fieldDisplay: {\r\n                    display: 'block'\r\n                }\r\n            })\r\n        }\r\n        if (mark === 1) {\r\n            this.userMark = 1\r\n            this.setState({\r\n                init: {\r\n                    display: 'none'\r\n                },\r\n                fieldDisplay: {\r\n                    display: 'block'\r\n                }\r\n            })\r\n            this.cpusChoice()\r\n        }\r\n    }\r\n    addSelected(number) {\r\n        if(this.turnType !== 'normal'){\r\n            return\r\n        }\r\n        if(typeof(this.blocks[Number(number)].stones) === 'string'){\r\n            return\r\n        }\r\n        if (this.blocks[Number(number)].selected) {\r\n            this.blocks[Number(number)].selected = false\r\n            for (let i = 0; i < this.selected.length; i++) {\r\n                if (this.selected[i] === number) {\r\n                    this.selected.splice(i, 1)\r\n                }\r\n            }\r\n            this.setState({blocks: this.blocks})\r\n        } else {\r\n            if (this.selected.length < 2) {\r\n                this.blocks[Number(number)].selected = true\r\n                this.selected.push(Number(number))\r\n                this.setState({blocks: this.blocks})\r\n            }\r\n        }\r\n    }\r\n    addTurn() {\r\n        if (this.selected.length === 2) {\r\n            for (let number of this.selected) {\r\n                if (this.turnUser === 0) {\r\n                    this.blocks[number].stones.push('〇' + this.turn + ' ')\r\n                } else {\r\n                    this.blocks[number].stones.push('✖' + this.turn + ' ')\r\n                }\r\n                this.blocks[number].selected = false\r\n                this.setState({blocks: this.blocks})\r\n            }\r\n            this.haveStones.push(this.selected)\r\n            this.stonePos[this.selected[0]].push(this.turn)\r\n            this.stonePos[this.selected[1]].push(this.turn)\r\n\r\n            if (this.checkEntanglement(this.selected[1], this.selected[1], this.turn)) {\r\n                this.setState({\r\n                    showEntangle:{style:{display:'inline-block'}}\r\n                })\r\n                this.turnType = 'entanglement'\r\n                this.selected.sort(function(a,b){\r\n                    if(a < b) return -1;\r\n                    if(a > b) return 1;\r\n                    return 0;\r\n                })\r\n                this.cpusChoice()\r\n                return\r\n            }\r\n\r\n            this.turn += 1\r\n            if (this.turn % 2 === 0) {\r\n                this.turnUser = 1\r\n            } else {\r\n                this.turnUser = 0\r\n            }\r\n            this.setState({turn: this.turn})\r\n            this.selected = []\r\n            if(this.turn === 9){\r\n                let undefinedCounter = 0\r\n                let logger = -1\r\n                for(let w=0;w<9;w++){\r\n                    if(typeof(this.blocks[w].stones) !== 'string'){\r\n                        undefinedCounter += 1\r\n                        logger = w\r\n                    }\r\n                }\r\n                if(undefinedCounter === 1){\r\n                    this.blocks[logger].stones = '〇9'\r\n                    this.stonePosForWinLose[Math.floor(logger/3)][Math.round(logger%3)] = 9\r\n                    this.decidedPos[logger] = 9\r\n                    this.setState({\r\n                        blocks:this.blocks\r\n                    })\r\n                    let WinLose = this.checkWinLose()\r\n                    if(WinLose === -1){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block'},text:'DRAW'},\r\n                            showEntangle:{style:{display:'none'}}\r\n                        })\r\n                        return\r\n                    }\r\n                    if(WinLose === this.userMark){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block'},text:'YOU WIN'},\r\n                            showEntangle:{style:{display:'none'}}\r\n                        })\r\n                        return\r\n                    }\r\n                    if(WinLose === this.userMark){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block'},text:'YOU LOSE'},\r\n                            showEntangle:{style:{display:'none'}}\r\n                        })\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n            this.cpusChoice()\r\n        }\r\n    }\r\n    checkEntanglement(first, selected, turn) {\r\n        if (this.stonePos[selected].length === 1) {\r\n            return false\r\n        }\r\n        for (let i = 0; i < (this.stonePos[selected].length); i++) {\r\n            let turnSelected = this.stonePos[selected][i]\r\n            if (turnSelected !== turn) {\r\n                if (this.checkBlock(first, selected, turnSelected)) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    checkBlock(first, selected, turn) {\r\n        for (let i = 0; i < (this.haveStones[turn - 1].length); i++) {\r\n            let blockSelected = this.haveStones[turn - 1][i]\r\n            if (blockSelected !== selected) {\r\n                if (first === blockSelected) {\r\n                    return true\r\n                } else if (this.checkEntanglement(first, blockSelected, turn)) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    choiceAction() {\r\n        this.blocks[this.selected[1]].selected = true\r\n        let choices = []\r\n        for(let turnCheck of this.stonePos[this.selected[1]]){\r\n            if(this.checkBlock(this.selected[1],this.selected[1],turnCheck)){\r\n                choices.push(turnCheck)\r\n            }\r\n        }\r\n        this.setState({\r\n            blocks:this.blocks,\r\n            choices:choices\r\n        })\r\n        this.setState({\r\n            buttonBisible: {\r\n                display: 'none'\r\n            },\r\n            choiceBisible: {\r\n                display: 'inline-block'\r\n            }\r\n        })\r\n    }\r\n    decideBlock(turnNum0){\r\n        const turnNum = Number(turnNum0)\r\n        this.blocks[this.selected[1]].selected = false\r\n        this.setState({\r\n            blocks:this.blocks\r\n        })\r\n        this.stonePosForWinLose[Math.floor(this.selected[1]/3)][Math.round(this.selected[1]%3)] = turnNum\r\n        this.decidedPos[this.selected[1]] = turnNum\r\n        if(turnNum%2 === 1){\r\n            this.blocks[this.selected[1]].stones = '〇' + turnNum\r\n        }else if (turnNum%2 === 0) {\r\n            this.blocks[this.selected[1]].stones = '✖' + turnNum\r\n        }\r\n        this.decideBlock1(this.selected[1],this.selected[1],turnNum,turnNum)\r\n        this.setState({\r\n            blocks:this.blocks\r\n        })\r\n        this.turnType = 'normal'\r\n        this.setState({\r\n            buttonBisible: {\r\n                display: 'block'\r\n            },\r\n            choiceBisible: {\r\n                display: 'none'\r\n            }\r\n        })\r\n        this.turn += 1\r\n        if (this.turn % 2 === 0) {\r\n            this.turnUser = 1\r\n        } else {\r\n            this.turnUser = 0\r\n        }\r\n        this.setState({turn: this.turn})\r\n        this.selected = []\r\n        let WinLose = this.checkWinLose()\r\n        if(WinLose === -1 && this.turn !== 10){\r\n            if(this.turn === 9){\r\n                let undefinedCounter = 0\r\n                let logger = -1\r\n                for(let w=0;w<9;w++){\r\n                    if(typeof(this.blocks[w].stones) !== 'string'){\r\n                        undefinedCounter += 1\r\n                        logger = w\r\n                    }\r\n                }\r\n                if(undefinedCounter === 1){\r\n                    this.blocks[logger].stones = '〇9'\r\n                    this.stonePosForWinLose[Math.floor(logger/3)][Math.round(logger%3)] = 9\r\n                    this.decidedPos[logger] = 9\r\n                    this.setState({\r\n                        blocks:this.blocks\r\n                    })\r\n                    let WinLose = this.checkWinLose()\r\n                    if(WinLose === -1){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block',color:'black'},text:'DRAW'},\r\n                            showEntangle:{style:{display:'none'}}\r\n                        })\r\n                        return\r\n                    }\r\n                    if(WinLose === this.userMark){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block',color:'red'},text:'YOU WIN'},\r\n                            showEntangle:{style:{display:'none'}}\r\n                        })\r\n                        return\r\n                    }\r\n                    if(WinLose === this.userMark){\r\n                        this.setState({\r\n                            showWinLose:{style:{display:'inline-block',color:'blue'},text:'YOU LOSE'},\r\n                            showEntangle:{style:{display:'none'}}\r\n                        })\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n            if(this.turnUser !== this.userMark){\r\n                this.cpusChoice()\r\n                return\r\n            }else {\r\n                return\r\n            }\r\n        }\r\n        if(WinLose === -1){\r\n            this.setState({\r\n                showWinLose:{style:{display:'inline-block',color:'black'},text:'DRAW'},\r\n                showEntangle:{style:{display:'none'}}\r\n            })\r\n            return\r\n        }\r\n        if(WinLose === this.userMark){\r\n            this.setState({\r\n                showWinLose:{style:{display:'inline-block',color:'red'},text:'YOU WIN'},\r\n                showEntangle:{style:{display:'none'}}\r\n            })\r\n            return\r\n        }\r\n        if(WinLose !== this.userMark){\r\n            this.setState({\r\n                showWinLose:{style:{display:'inline-block',color:'blue'},text:'YOU LOSE'},\r\n                showEntangle:{style:{display:'none'}}\r\n            })\r\n            return\r\n        }\r\n    }\r\n    decideBlock1(first,selected,turn,selectedTurn){\r\n        for (let i = 0; i < (this.stonePos[selected].length); i++) {\r\n            let turnSelected = this.stonePos[selected][i]\r\n            if (turnSelected !== turn) {\r\n                this.decideBlock2(first,selected,turnSelected,selectedTurn)\r\n            }\r\n            if(first === selected){\r\n                if(turnSelected === selectedTurn){\r\n                    for (let j = 0; j < (this.haveStones[selectedTurn - 1].length); j++) {\r\n                        let blockSelected = this.haveStones[selectedTurn - 1][j]\r\n                        if (blockSelected !== selected) {\r\n                            for(let k=0;k<this.blocks[blockSelected].stones.length;k++){\r\n                                let iterTurn = this.blocks[blockSelected].stones[k]\r\n                                let selectedTurnStr = selectedTurn%2 === 1 ? '〇'+selectedTurn : '✖'+selectedTurn\r\n                                if(iterTurn === selectedTurnStr){\r\n                                    this.blocks[blockSelected].stones.splice(k,1)\r\n\r\n                                }\r\n                            }\r\n                            for(let t=0;t<this.stonePos[blockSelected].length;t++){\r\n                                let iterTurn2 = this.stonePos[blockSelected][t]\r\n                                if(iterTurn2 === selectedTurn){\r\n                                    this.stonePos[blockSelected].splice(t,1)\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return\r\n    }\r\n    decideBlock2(first,selected,turn,selectedTurn){\r\n        for (let i = 0; i < (this.haveStones[turn - 1].length); i++) {\r\n            let blockSelected = this.haveStones[turn - 1][i]\r\n            if (blockSelected !== selected) {\r\n                if (first === blockSelected) {\r\n                    return\r\n                } else {\r\n                    this.decideBlock1(first,blockSelected,turn,selectedTurn)\r\n                    if(turn%2 === 1){\r\n                        this.blocks[blockSelected].stones = '〇' + turn\r\n                    }else if (turn%2 === 0) {\r\n                        this.blocks[blockSelected].stones = '✖' + turn\r\n                    }\r\n                    this.stonePosForWinLose[Math.floor(blockSelected/3)][Math.round(blockSelected%3)] = turn\r\n                    this.decidedPos[blockSelected] = turn\r\n                }\r\n            }\r\n        }\r\n        return\r\n    }\r\n    checkWinLose(){\r\n        let TF1 = false\r\n        let score1 = 10\r\n        let TF2 = false\r\n        let score2 = 10\r\n        for(let y=0;y<3;y++){\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let countscore = 0\r\n            for(let x=0;x<3;x++){\r\n                if(this.stonePosForWinLose[y][x]%2 === 1){\r\n                    count1 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x]%2 === 0){\r\n                    count2 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x] > countscore){\r\n                    countscore = this.stonePosForWinLose[y][x]\r\n                }\r\n            }\r\n            if(count1 === 3){\r\n                TF1 = true\r\n                if(countscore < score1){\r\n                    score1 = countscore\r\n                }\r\n            }\r\n            if(count2 === 3){\r\n                TF2 = true\r\n                if(countscore < score2){\r\n                    score2 = countscore\r\n                }\r\n            }\r\n        }\r\n        for(let x=0;x<3;x++){\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let countscore = 0\r\n            for(let y=0;y<3;y++){\r\n                if(this.stonePosForWinLose[y][x]%2 === 1){\r\n                    count1 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x]%2 === 0){\r\n                    count2 += 1\r\n                }\r\n                if(this.stonePosForWinLose[y][x] > countscore){\r\n                    countscore = this.stonePosForWinLose[y][x]\r\n                }\r\n            }\r\n            if(count1 === 3){\r\n                TF1 = true\r\n                if(countscore < score1){\r\n                    score1 = countscore\r\n                }\r\n            }\r\n            if(count2 === 3){\r\n                TF2 = true\r\n                if(countscore < score2){\r\n                    score2 = countscore\r\n                }\r\n            }\r\n        }\r\n        let count1 = 0\r\n        let count2 = 0\r\n        let countscore = 0\r\n        for(let z=0;z<3;z++){\r\n            if(this.stonePosForWinLose[z][z]%2 === 1){\r\n                count1 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][z]%2 === 0){\r\n                count2 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][z] > countscore){\r\n                countscore = this.stonePosForWinLose[z][z]\r\n            }\r\n        }\r\n        if(count1 === 3){\r\n            TF1 = true\r\n            if(countscore < score1){\r\n                score1 = countscore\r\n            }\r\n        }\r\n        if(count2 === 3){\r\n            TF2 = true\r\n            if(countscore < score2){\r\n                score2 = countscore\r\n            }\r\n        }\r\n        count1 = 0\r\n        count2 = 0\r\n        countscore = 0\r\n        for(let z=0;z<3;z++){\r\n            if(this.stonePosForWinLose[z][2-z]%2 === 1){\r\n                count1 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][2-z]%2 === 0){\r\n                count2 += 1\r\n            }\r\n            if(this.stonePosForWinLose[z][2-z] > countscore){\r\n                countscore = this.stonePosForWinLose[z][2-z]\r\n            }\r\n        }\r\n        if(count1 === 3){\r\n            TF1 = true\r\n            if(countscore < score1){\r\n                score1 = countscore\r\n            }\r\n        }\r\n        if(count2 === 3){\r\n            TF2 = true\r\n            if(countscore < score2){\r\n                score2 = countscore\r\n            }\r\n        }\r\n\r\n        if(TF1 === true && TF2 === false){\r\n            return 0\r\n        }\r\n        if(TF1 === false && TF2 === true){\r\n            return 1\r\n        }\r\n        if(TF1 === true && TF2 === true){\r\n            if(score1 < score2){\r\n                return 0\r\n            }else if (score1 > score2) {\r\n                return 1\r\n            }\r\n        }\r\n        return -1\r\n    }\r\n    resetField(){\r\n        this.turn = 1\r\n        this.turnUser = 0\r\n        this.turnType = 'normal'\r\n        this.blocks = [\r\n            {\r\n                number: 0,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 1,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 2,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 3,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 4,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 5,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 6,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 7,\r\n                stones: [],\r\n                selected: false\r\n            }, {\r\n                number: 8,\r\n                stones: [],\r\n                selected: false\r\n            }\r\n        ]\r\n        this.selected = []\r\n        this.haveStones = []\r\n        this.stonePos = [\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            [],\r\n            []\r\n        ]\r\n        this.decidedPos = [0,0,0,0,0,0,0,0,0]\r\n        this.stonePosForWinLose = [[undefined,undefined,undefined],[undefined,undefined,undefined],[undefined,undefined,undefined]]\r\n        this.setState({\r\n            fieldDisplay: {\r\n                display: 'none'\r\n            },\r\n            init: {\r\n                display: 'block'\r\n            },\r\n            turn: 1,\r\n            blocks: [\r\n                {\r\n                    number: 0,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 1,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 2,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 3,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 4,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 5,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 6,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 7,\r\n                    stones: [],\r\n                    selected: false\r\n                }, {\r\n                    number: 8,\r\n                    stones: [],\r\n                    selected: false\r\n                }\r\n            ],\r\n            buttonBisible: {\r\n                display: 'block'\r\n            },\r\n            choiceBisible: {\r\n                display: 'none'\r\n            },\r\n            choices:[],\r\n            showWinLose:{style:{display:'none'},text:''},\r\n            showEntangle:{style:{display:'none'}}\r\n        })\r\n    }\r\n    clearShowEntangle(){\r\n        this.setState({\r\n            showEntangle:{style:{display:'none'}}\r\n        })\r\n    }\r\n    cpusChoice(){\r\n        if(this.turnType === 'entanglement') {\r\n            let choice = ESRL(this)\r\n            this.decideBlock(choice)\r\n        }else {\r\n            let choice = ESRL(this)\r\n            this.selected = choice\r\n            if (this.selected.length === 2) {\r\n                for (let number of this.selected) {\r\n                    if (this.turnUser === 0) {\r\n                        this.blocks[number].stones.push('〇' + this.turn + ' ')\r\n                    } else {\r\n                        this.blocks[number].stones.push('✖' + this.turn + ' ')\r\n                    }\r\n                    this.setState({blocks: this.blocks})\r\n                }\r\n                this.haveStones.push(this.selected)\r\n                this.stonePos[this.selected[0]].push(this.turn)\r\n                this.stonePos[this.selected[1]].push(this.turn)\r\n\r\n                if (this.checkEntanglement(this.selected[1], this.selected[1], this.turn)) {\r\n                    this.setState({\r\n                        showEntangle:{style:{display:'inline-block'}}\r\n                    })\r\n                    this.turnType = 'entanglement'\r\n                    this.choiceAction()\r\n                    return\r\n                }\r\n\r\n                this.turn += 1\r\n                if (this.turn % 2 === 0) {\r\n                    this.turnUser = 1\r\n                } else {\r\n                    this.turnUser = 0\r\n                }\r\n                this.setState({turn: this.turn})\r\n                this.selected = []\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        if(this.state.loading){\r\n            return (\r\n                <div className='Field'>\r\n                    <p style={{textAlign:\"center\"}}>Loading...</p>\r\n                    <p style={{textAlign:\"center\"}}><CircularProgress /></p>\r\n                </div>\r\n            )\r\n        }\r\n        return (<div className='Field'>\r\n            <InitDisplay onClick={this.start} style={this.state.init}/>\r\n            <div style={this.state.fieldDisplay}>\r\n            <div className='showWinLose' style={this.state.showWinLose.style} onClick={this.resetField}>\r\n                {this.state.showWinLose.text}\r\n            </div>\r\n            <div className='showEntangle' style={this.state.showEntangle.style} onClick={this.clearShowEntangle}>\r\n                Cyclic Entangle!\r\n            </div>\r\n            <table className=\"App\">\r\n                <tbody>\r\n                    {this.makeLines()}\r\n                </tbody>\r\n            </table>\r\n            <div className=\"turndisplay\">turn: {this.turn}</div>\r\n            <Button variant='contained' color='default' size='large' className=\"button\" style={this.state.buttonBisible} onClick={this.addTurn}>Place</Button>\r\n            <ButtonGroup className='choice' style={this.state.choiceBisible}>\r\n                {this.state.choices.map((value,key)=>(<Button variant='contained' size='medium' className='marubatsu' key={key} data-turn={value} onClick={(event)=>this.decideBlock(event.currentTarget.dataset.turn)}>{value%2 === 1 ? '〇'+value : '✖'+value}</Button>))}\r\n            </ButtonGroup>\r\n        </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nfunction randomCpu(App) {\r\n    if(App.turnType === 'entanglement') {\r\n        let selectable = []\r\n        for(let turnCheck of App.stonePos[App.selected[1]]){\r\n            if(App.checkBlock(App.selected[1],App.selected[1],turnCheck)){\r\n                selectable.push(turnCheck)\r\n            }\r\n        }\r\n        let choice = selectable[Math.floor(Math.random()*selectable.length)]\r\n        return choice\r\n    }else {\r\n        let selectable = []\r\n        for(let i=0;i<App.blocks.length;i++){\r\n            if(typeof(App.blocks[i].stones) !== 'string') {\r\n                selectable.push(i)\r\n            }\r\n        }\r\n        let sai = Math.floor(Math.random()*selectable.length)\r\n        let choice1 = selectable[sai]\r\n        selectable.splice(sai,1)\r\n        let choice2 = selectable[Math.floor(Math.random()*selectable.length)]\r\n        return [choice1,choice2]\r\n    }\r\n}\r\nfunction ESRL(App) {\r\n    if(Math.random()*100 < 100){//randomにする確率の調整\r\n        let choices = []\r\n        for(let i=0;i<8;i++){\r\n            for(let j=i+1;j<9;j++){\r\n                choices.push([i,j])\r\n            }\r\n        }\r\n        for(let t=0;t<9;t++){\r\n            choices.push(t+1)\r\n        }\r\n        let cases = [0,0,0,0,0,0,0,0,0]\r\n        let case_param = Array(18*9)\r\n        case_param.fill(0)\r\n        for(let w=0;w<9;w++){\r\n            let decided = App.decidedPos[w]\r\n            if(decided !== 0){\r\n                case_param[18*w+(decided-1)] = 1\r\n                cases[w] = 1\r\n            }\r\n        }\r\n        for(let l=0;l<9;l++){\r\n            if(cases[l] === 0) {\r\n                let virpos = App.stonePos[l]\r\n                for(let m=0;m<virpos.length;m++) {\r\n                    let sturn = virpos[m]\r\n                    case_param[18*l+9+sturn-1] = 1\r\n                }\r\n                cases[l] = 1\r\n            }\r\n        }\r\n        case_param = tf.tensor([case_param])\r\n        let predicted_value = ESRLmodel.predict(case_param).dataSync()\r\n        let choiceIndex\r\n        if(App.turn === 1){\r\n            choiceIndex = weightRandom(predicted_value,10)\r\n        }else if(App.turn === 2){\r\n            choiceIndex = weightRandom(predicted_value,10)\r\n        }else{\r\n            choiceIndex = predicted_value.indexOf(Math.max.apply(null, predicted_value))\r\n        }\r\n        //let choiceIndex = weightRandom(predicted_value,400)\r\n        //let choiceIndex = predicted_value.indexOf(Math.max.apply(null, predicted_value))\r\n        let choice = choices[choiceIndex]\r\n        //console.log(Math.max.apply(null, predicted_value))\r\n        console.log(predicted_value[choiceIndex])\r\n        //console.log(predicted_value)\r\n        if(App.turnType === 'entanglement') {\r\n            let selectable = []\r\n            for(let turnCheck of App.stonePos[App.selected[1]]){\r\n                if(App.checkBlock(App.selected[1],App.selected[1],turnCheck)){\r\n                    selectable.push(turnCheck)\r\n                }\r\n            }\r\n            if(selectable.indexOf(choice) === -1 || choiceIndex < 36) {\r\n                choice = selectable[Math.floor(Math.random()*selectable.length)]\r\n            }\r\n        }else {\r\n            let selectable = []\r\n            for(let i=0;i<App.blocks.length;i++){\r\n                if(typeof(App.blocks[i].stones) !== 'string') {\r\n                    selectable.push(i)\r\n                }\r\n            }\r\n            if(choiceIndex >= 36){\r\n                let sai = Math.floor(Math.random()*selectable.length)\r\n                let choice1 = selectable[sai]\r\n                selectable.splice(sai,1)\r\n                let choice2 = selectable[Math.floor(Math.random()*selectable.length)]\r\n                choice = [choice1,choice2]\r\n            }else{\r\n                for(let cci of choice){\r\n                    if(selectable.indexOf(cci) === -1) {\r\n                        let sai = Math.floor(Math.random()*selectable.length)\r\n                        let choice1 = selectable[sai]\r\n                        selectable.splice(sai,1)\r\n                        let choice2 = selectable[Math.floor(Math.random()*selectable.length)]\r\n                        choice = [choice1,choice2]\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return choice\r\n    }else{\r\n        console.log(\"random action\")\r\n        return randomCpu(App)\r\n    }\r\n}\r\nfunction weightRandom (weight, t) {\r\n    const reducer = (accumulator,currentValue) => accumulator + Math.pow(2,currentValue/t)\r\n    let summen = weight.reduce(reducer,0)\r\n    let dice = Math.random() * summen\r\n    let under = 0\r\n    let top\r\n    for(let i=0;i<45;i++){\r\n        top = under + Math.pow(2,weight[i]/t)\r\n        if(under<=dice && dice<top) {\r\n            return i\r\n        }\r\n        under = top\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}